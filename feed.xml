<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラミング言語 Crystal</title>
    <description>Ruby のような構文で型推論のあるコンパイル言語</description>
    <link>https://ja.crystal-lang.org</link>
    <atom:link href="https://ja.crystal-lang.org/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Raw Crystal 2020</title>
        <description>&lt;p&gt;先週、Raw Crystal 2020 の第一段が開催されました。すべてのスピーカーのみなさんと参加者のみなさん、そしてこのイベントを現実のものにしてくださった Lorenzo Barasti さんに感謝いたします。この取り組みに貢献できたこと光栄に思います。そして、再びみなさんに会えることを願っています。&lt;/p&gt;

&lt;p&gt;今回、Zoom と YouTube をストリーミングに利用しました。当日は最大 160 人の閲覧者がいて、各発表には最低でも 30 人は参加していました。&lt;/p&gt;

&lt;h2 id=&quot;ビデオ-&quot;&gt;ビデオ 🍿&lt;/h2&gt;

&lt;iframe width=&quot;840&quot; height=&quot;473&quot; src=&quot;https://www.youtube.com/embed/videoseries?list=PLfpFq_WLOW__RIIyWvTgYV4bw2cpav2mJ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; style=&quot;margin: 0 auto; max-width: 100%;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;オーディエンス&quot;&gt;オーディエンス&lt;/h2&gt;

&lt;p&gt;イベントの最中に、Zoom の投票機能を使っていくつかの質問を行いました。集計結果を見てみましょう。&lt;/p&gt;

&lt;table class=&quot;bordered no-underline&quot; style=&quot;width: auto; margin: 0 auto;&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;地域&lt;/th&gt;&lt;th&gt;数&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;アジア&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;4&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;オーストラリア&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;ヨーロッパ&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;50&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;北アメリカ&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;33&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;南アメリカ&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;8&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;合計&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;96&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table class=&quot;bordered no-underline&quot; style=&quot;width: auto; margin: 0 auto;&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;年齢&lt;/th&gt;&lt;th&gt;数&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;16以下&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;16-19&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;20-24&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;5&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;25-34&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;27&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;45-54&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;49&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;55以上&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;5&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;合計&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;96&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;参加者のプログラミング背景についての2つの質問の結果を見てみましょう。&lt;/p&gt;

&lt;table class=&quot;bordered no-underline&quot; style=&quot;width: auto; margin: 0 auto;&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;ここ6ヶ月で最も利用したプログラミング言語&lt;/th&gt;&lt;th&gt;数&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;C/C++&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;6&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Crystal&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;8&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Go&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Javascript&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;5&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Java, Scala, Clojure, Kotlin&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;2&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Python&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;2&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Ruby&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;20&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Rust&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;その他&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;合計&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;46&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table class=&quot;bordered no-underline&quot; style=&quot;width: auto; margin: 0 auto;&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;どれくらいの期間 Crystal を利用してきたか/知っていたか？&lt;/th&gt;&lt;th&gt;数&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;1ヶ月未満&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;2&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;6ヶ月未満&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;6&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;1年未満&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;7&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;3年未満&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;19&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;3年以上&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;12&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;合計&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;46&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/12/16/raw-crystal-2020.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/12/16/raw-crystal-2020.html</guid>
      </item>
    
      <item>
        <title>Organising a Crystal conference in 2020</title>
        <description>&lt;p&gt;Since I started exploring Crystal, I’ve always been impressed with how supportive people in the community were. It’s the kind of feeling that makes you look forward to engage with fellow humans sharing a passion for building things.&lt;/p&gt;

&lt;p&gt;Last month, I decided to turn that feeling into action by organising a community-driven, online conference dedicated to Crystal and its users. That conference now has a name - Raw Crystal 2020 - and a date: Friday, 11 December 2020.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/2020-11-raw-crystal-banner.png&quot; width=&quot;417&quot; height=&quot;176&quot; class=&quot;center&quot; alt=&quot;Raw Crystal 2020 logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let me give you an overview of what you can expect to see at the conference and share some insight on the organisation process.&lt;/p&gt;

&lt;h2 id=&quot;why-a-crystal-conference&quot;&gt;Why a Crystal conference?&lt;/h2&gt;
&lt;p&gt;This being my first conference as organiser, I thought I should put into words the purposes of the event, so that I could base my decisions on them. Here is what I came up with.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Build a sense of community&lt;/strong&gt;: many of us across the world choose Crystal for their studies, experimentation, side projects and production system. Raw Crystal should give these people the opportunity to connect and build a trusted network.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Build a collection of knowledge&lt;/strong&gt;: by recording and sharing the conference talks, we hope to leave a trail of knowledge that others can pick up and build upon in the future.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Share knowledge and spark ideas&lt;/strong&gt;: we hope that the talks and conversations you’ll have at the conference will make you want to start something new, or simply just tackle an old problem in a novel way.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-search-for-speakers&quot;&gt;The search for speakers&lt;/h2&gt;
&lt;p&gt;After reading a few articles on the subject, I realised that finding speakers was going to be the most challenging part of the organisation. So before even thinking of a landing page for the conference, I launched &lt;a href=&quot;https://forms.gle/tDSfrTQuWhSVmQo4A&quot;&gt;a simple Google form&lt;/a&gt; to gather talk proposals.&lt;/p&gt;

&lt;p&gt;Only a handful of talks came through over the first week, so I decided to proactively get in touch with prospective speakers to prompt them to contribute.
I selected a few people based on their activity on the various Crystal channels - e.g. forum, gitter, github - and on their involvement in interesting projects - cherry-picked from shard aggregators websites such as &lt;a href=&quot;http://crystalshards.xyz&quot;&gt;crystalshards.xyz&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also leveraged my network of Crystal friends. In particular, I asked Jack Thorne - of &lt;a href=&quot;https://www.buzzsprout.com/1030945&quot;&gt;Chicago Crystal&lt;/a&gt; fame - to look after and moderate a panel discussion to close the event - kudos Jack!
&lt;img src=&quot;/assets/blog/2020-11-raw-crystal-jack.png&quot; width=&quot;617&quot; class=&quot;center&quot; alt=&quot;A couple of messages I exchanged Jack on Slack. I asked: would you be up for moderating a panel discussion at a conference, if we were to have one? He answered: yes!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In parallel, I engaged with a few members of the Crystal core team to secure a keynote speaker - thanks Brian - and look for collaborators in the organisation of the event.&lt;/p&gt;

&lt;p&gt;Finally, with the idea of ensuring a broad coverage of topics - from the language tool ecosystem to web application development - I decided to pick three featured speakers. You can find their names on the &lt;a href=&quot;https://www.eventbrite.co.uk/e/raw-crystal-2020-tickets-127439094763&quot;&gt;event page&lt;/a&gt;, if you are curious.&lt;/p&gt;

&lt;h2 id=&quot;compromising-on-time&quot;&gt;Compromising on time&lt;/h2&gt;
&lt;p&gt;Picking a time for the conference was quite challenging: on one hand, I wanted to make the event accessible to as many people across the world as possible. On the other hand, it is impossible to make everyone happy on a global scale.&lt;/p&gt;

&lt;p&gt;I decided to make a choice based on the following constraints:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the selected schedule should be friendly to people based in Argentina - that’s where many members of the core team are based&lt;/li&gt;
  &lt;li&gt;the selected schedule should not affect my circadian rhythm too badly - I’m based in London, UK&lt;/li&gt;
  &lt;li&gt;the total span of the event should be manageable for a single person to run - so no marathons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also reviewed geo data related to users of my personal blog and to users of my YouTube channel. This reminded me that Crystal has a significant number of friends in North America.&lt;/p&gt;

&lt;p&gt;Based on all the above, I decided to go for a 6-hour-long conference starting at 16:00 UTC.
&lt;img src=&quot;/assets/blog/2020-11-raw-crystal-schedule.png&quot; width=&quot;617&quot; class=&quot;center&quot; alt=&quot;Event schedule: the event will start at 8 am PST on Friday 11, December 2020, and close around 1 pm PST on the same day.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If these times don’t work for you, then despair not! I will be sharing the recording of the talks on YouTube after the event.&lt;/p&gt;

&lt;h2 id=&quot;code-of-conduct-first&quot;&gt;Code of conduct first&lt;/h2&gt;
&lt;p&gt;Before launching a landing page for the event, I decided to define a code of conduct, to avoid any misunderstanding.&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&quot;https://blog.tito.io/posts/code-of-conduct-for-virtual-events/&quot;&gt;this article&lt;/a&gt; on &lt;em&gt;Adapting Your Code of Conduct for Virtual Events&lt;/em&gt; extremely valuable, and ended up deriving the CoC for Raw Crystal 2020 from the one designed at &lt;a href=&quot;https://hashtagcauseascene.com/code-of-conduct/&quot;&gt;#causeascene&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You’ll find the conference CoC on the closing paragraph of the &lt;a href=&quot;https://www.eventbrite.co.uk/e/raw-crystal-2020-tickets-127439094763&quot;&gt;event page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;registrations-in-numbers---so-far&quot;&gt;Registrations in numbers - so far&lt;/h2&gt;
&lt;p&gt;As of Wednesday 18 November, 86 people have registered to the conference.
&lt;img src=&quot;/assets/blog/2020-11-raw-crystal-registrations.png&quot; width=&quot;617&quot; class=&quot;center&quot; alt=&quot;Registrations by day: 24 registration on 12 Nov, 21 on the 13th, around 10 on the 14th, 15th and 16th, around 5 on the 17th and on the 18th.&quot; /&gt;
It was exciting to see a spike registrations as soon as the tickets were made available. The numbers have now gone down a bit, but I’m expecting to see another spike a day or two before registration closure.&lt;/p&gt;

&lt;p&gt;Attendees are registering from all over the world, with some fearless folks based in Australia, South Korea, China and India ready to tune in way past bed time.
&lt;img src=&quot;/assets/blog/2020-11-raw-crystal-geo.png&quot; width=&quot;617&quot; class=&quot;center&quot; alt=&quot;Registrations across the word: 28 registrations in North America, 43 in Europe, 8 in South America, 7 between Asia and Australia.&quot; /&gt;
Around 50% of the registrations come from Europe; 30% of the registrations come from North America.&lt;/p&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h1&gt;
&lt;p&gt;A lot has been decided already, but I’m still working out a few crucial details - mainly, which software we’ll be using to run and record the event.&lt;/p&gt;

&lt;p&gt;I am also looking forward to finalising the speakers line-up for you to see and plan your conference day.&lt;/p&gt;

&lt;p&gt;Meanwhile, I’ll be happy to read your comments below, listen to your suggestions and answer any questions!&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/11/19/organising-raw-crystal.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/11/19/organising-raw-crystal.html</guid>
      </item>
    
      <item>
        <title>Announcing new apt and rpm repositories</title>
        <description>&lt;p&gt;We’ve been working on improving the state of the art of the official deb and rpm repositories.&lt;/p&gt;

&lt;p&gt;The main outcome is that we will be able to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;publish stable, unstable and nightly packages&lt;/li&gt;
  &lt;li&gt;allow users to pick which crystal version to install&lt;/li&gt;
  &lt;li&gt;allow tweaking dependencies when needed (ie: CentOS 6 vs others regarding libevent2-devel and libevent-devel)&lt;/li&gt;
  &lt;li&gt;introduce a single installation script that, for now, will work with deb/rpm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will allow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a more comfortable experience to end user&lt;/li&gt;
  &lt;li&gt;relying on apt and rpm repositories for getting not only the latest crystal release&lt;/li&gt;
  &lt;li&gt;testing nightly packages without requiring Docker or Snap&lt;/li&gt;
  &lt;li&gt;simplifying adoption in other CI systems in case our Docker image is not suitable enough&lt;/li&gt;
  &lt;li&gt;having statistics of version adoption&lt;/li&gt;
  &lt;li&gt;eventually splitting the current package in compiler, shards and maybe tools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will be hosting these packages at &lt;a href=&quot;https://bintray.com/crystal&quot;&gt;https://bintray.com/crystal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The current apt and rpm packages in &lt;a href=&quot;https://dist.crystal-lang.org/&quot;&gt;https://dist.crystal-lang.org&lt;/a&gt; will be available and receive stable updates until November 2020 as a transition period.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/install.sh&quot;&gt;installation script&lt;/a&gt; allows installing the latest stable version by default:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://crystal-lang.org/install.sh &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; install.sh
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x install.sh
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./install.sh
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Or, to run it directly
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://crystal-lang.org/install.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Or, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;you prefer wget
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - https://crystal-lang.org/install.sh&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Choose the channel, for example to pick nightly packages:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./install.sh &lt;span class=&quot;nt&quot;&gt;--channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nightly
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Or, to run it directly
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://crystal-lang.org/install.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nightly
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Or, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;you prefer wget
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - https://crystal-lang.org/install.sh&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nightly&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Install a specific version as &lt;code class=&quot;highlighter-rouge&quot;&gt;major.minor.patch&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;major.minor&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;major.minor.patch-iteration&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./install.sh &lt;span class=&quot;nt&quot;&gt;--crystal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.35
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Or, to run it directly
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://crystal-lang.org/install.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--crystal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.35
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Or, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;you prefer wget
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - https://crystal-lang.org/install.sh&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--crystal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.35&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;In general, the install script accepts optional arguments&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--crystal&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;major.minor.patch&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;major.minor&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;major.minor.patch-iteration&lt;/code&gt; values&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--channel&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;stable&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;unstable&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;nightly&lt;/code&gt; value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will identify the Linux distribution and use &lt;code class=&quot;highlighter-rouge&quot;&gt;yum&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The installation script requires &lt;code class=&quot;highlighter-rouge&quot;&gt;gnupg&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ca-certificates&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-transport-https&lt;/code&gt; packages that might be already available on your setup. It also needs to be run as root.&lt;/p&gt;

&lt;h2 id=&quot;what-if-i-already-have-crystal-installed-via-aptrpm&quot;&gt;What if I already have crystal installed via apt/rpm?&lt;/h2&gt;

&lt;p&gt;The installation script will overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apt/sources.list.d/crystal.list&lt;/code&gt; and  &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/yum.repos.d/crystal.repo&lt;/code&gt; on every execution. These are the same files used in the former official apt and rpm repositories.&lt;/p&gt;

&lt;p&gt;If you already have the latest version of Crystal (0.35.1) and run the installation scripts you will see&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Debian/Ubuntu
&lt;span class=&quot;go&quot;&gt;... stripped ...
crystal is already the newest version (0.35.1-1).
0 upgraded, 0 newly installed, 0 to remove and 2 not upgraded.

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; CentOS/Fedora
&lt;span class=&quot;go&quot;&gt;... stripped ...
Package crystal-0.35.1-1.x86_64 already installed and latest version
Nothing to do&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;This happens when there is no newer version in the new repository. If you switch to the nightly channel you will get 1.0.0-dev.&lt;/p&gt;

&lt;p&gt;You can run &lt;code class=&quot;highlighter-rouge&quot;&gt;apt -y remove crystal&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;rpm -e crystal&lt;/code&gt; to remove the current installed Crystal and then execute the installation script.&lt;/p&gt;

&lt;h2 id=&quot;caveats&quot;&gt;Caveats&lt;/h2&gt;

&lt;p&gt;The installation script will upgrade to a newer crystal, but will not downgrade.&lt;/p&gt;

&lt;p&gt;If you already have 0.35.1 and wish to downgrade to the latest 0.34 you will get the following output.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./install.sh &lt;span class=&quot;nt&quot;&gt;--crystal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.34
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Debian/Ubuntu
&lt;span class=&quot;go&quot;&gt;... stripped ...
Selected version '0.34.0-1' (Bintray:all [amd64]) for 'crystal'
Suggested packages:
  libxml2-dev libgmp-dev libyaml-dev libreadline-dev
The following packages will be DOWNGRADED:
  crystal
0 upgraded, 0 newly installed, 1 downgraded, 0 to remove and 2 not upgraded.
E: Packages were downgraded and -y was used without --allow-downgrades.

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; CentOS/Fedora
&lt;span class=&quot;go&quot;&gt;... stripped ...
Package matching crystal-0.34.0-1.x86_64 already installed. Checking for update.
Nothing to do&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Instead of forcing a downgrade in the installation script we require you to explicitly uninstall crystal before a downgrade.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; Debian/Ubuntu
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; apt &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; remove crystal
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./install.sh &lt;span class=&quot;nt&quot;&gt;--crystal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.34
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; CentOS/Fedora
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rpm &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; crystal
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./install.sh &lt;span class=&quot;nt&quot;&gt;--crystal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.34&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;When switching between channels you might need to clear the cached metadata.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; yum clean metadata&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What follows is a description of how these repositories are laid out for the sake of documentation.&lt;/p&gt;

&lt;h2 id=&quot;deb-repository&quot;&gt;deb repository&lt;/h2&gt;

&lt;p&gt;The deb repository declared with &lt;code class=&quot;highlighter-rouge&quot;&gt;deb_distribution=all&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;deb_component&lt;/code&gt; is used for the channel.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;deb https://dl.bintray.com/crystal/deb all stable
deb https://dl.bintray.com/crystal/deb all unstable
deb https://dl.bintray.com/crystal/deb all nightly&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Luckily the dependencies of all deb distributions are the same and there is no need, at least for now, to distinguish between them.&lt;/p&gt;

&lt;p&gt;Packages for amd64 and i386 are published.&lt;/p&gt;

&lt;p&gt;The repository metadata is signed with the Bintray shared GPG key&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; apt-key adv &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; hkp://keyserver.ubuntu.com:80 &lt;span class=&quot;nt&quot;&gt;--recv-keys&lt;/span&gt; 379CE192D401AB61&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The deb packages in stable and unstable channels are signed with our own GPG key.&lt;/p&gt;

&lt;p&gt;The deb packages in the nightly channel are not signed.&lt;/p&gt;

&lt;p&gt;When installing via &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; only the repository metadata signature is checked, so there is no need to add our own key in general.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://keybase.io/crystal/pgp_keys.asc&quot;&lt;/span&gt; | apt-key add -&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;rpm-repository&quot;&gt;rpm repository&lt;/h2&gt;

&lt;p&gt;The rpm repository required a bit more fine tuning. The url of the repo is &lt;code class=&quot;highlighter-rouge&quot;&gt;https://dl.bintray.com/crystal/rpm/{DISTRO}/{ARCH}/{CHANNEL}&lt;/code&gt;. In terms of Bintray configuration we use &lt;code class=&quot;highlighter-rouge&quot;&gt;yum_metadata_depth=3&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;We will be using two &lt;code class=&quot;highlighter-rouge&quot;&gt;{DISTRO}&lt;/code&gt; values: &lt;code class=&quot;highlighter-rouge&quot;&gt;el6&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt;. This is enough, for now, to support CentOS 6/7/8, Fedora. (Note: if CentOS 6/7 shipped with rpm &amp;gt;= 4.13 then a single package would have been enough with &lt;code class=&quot;highlighter-rouge&quot;&gt;libevent-devel &amp;gt;= 2.0 or libevent2-devel&lt;/code&gt; as a dependency).&lt;/p&gt;

&lt;p&gt;The only supported &lt;code class=&quot;highlighter-rouge&quot;&gt;{ARCH}&lt;/code&gt; for rpm is &lt;code class=&quot;highlighter-rouge&quot;&gt;x86_64&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And &lt;code class=&quot;highlighter-rouge&quot;&gt;{CHANNEL}&lt;/code&gt; is either &lt;code class=&quot;highlighter-rouge&quot;&gt;stable&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;unstable&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;nightly&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As before, the repository metadata is signed with the Bintray shared GPG key and the packages are signed with our own key, except for the nightly channel.&lt;/p&gt;

&lt;p&gt;Replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;{DISTRO}&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;{CHANNEL}&lt;/code&gt; and you are all set.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;[crystal]
name=Crystal
baseurl=https://dl.bintray.com/crystal/rpm/{DISTRO}/x86_64/{CHANNEL}
gpgcheck=0
repo_gpgcheck=1
gpgkey=http://bintray.com/user/downloadSubjectPublicKey?username=bintray&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;We plan to release an unstable 1.0.0-pre1 so we needed to formalise how tagged unstable releases are advertised. The 1.0.0-pre1 release will be the first one to land on the unstable channel, which is currently empty.&lt;/p&gt;

&lt;p&gt;There are also some draft ideas to formalize how .tar.gz will be advertised in channels.&lt;/p&gt;

&lt;p&gt;The advertised installation methods will be updated to reflect these new repositories.&lt;/p&gt;

&lt;p&gt;The CI integrations shall be updated also and might include some new features to pick a specific crystal version and channel.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/08/24/announcing-new-apt-and-rpm-repositories.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/08/24/announcing-new-apt-and-rpm-repositories.html</guid>
      </item>
    
      <item>
        <title>Preparing our shards for Crystal 1.0</title>
        <description>&lt;p&gt;A shard always has one or more dependencies. These dependencies are subject to change. The author might be more or less conservative regarding any breaking-changes. I want to revisit what are the mechanisms to check if the shard we are working on is up to date with the upcoming changes of its dependencies.&lt;/p&gt;

&lt;p&gt;Of course, the process described here is a bit opinionated. Depending on the release process of your shard and the branching scheme used, some things might need a little tweaking. Nonetheless, I think it is valuable to revisit at least one alternative to do it.&lt;/p&gt;

&lt;p&gt;When I say that the shard always has at least one dependency it is because the std-lib, and the language, act as yet another dependency.&lt;/p&gt;

&lt;h1 id=&quot;version-checks&quot;&gt;Version checks&lt;/h1&gt;

&lt;p&gt;As dependencies evolve, it is up to you to decide whether to support just the latest release and force everybody to be on edge, or to support some older versions.&lt;/p&gt;

&lt;p&gt;Thanks to the built-in reflection macros and methods as &lt;code class=&quot;highlighter-rouge&quot;&gt;has_constant?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;has_method?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;responds_to?&lt;/code&gt;, etc., we can have code that compiles and works on multiple versions of a dependency.&lt;/p&gt;

&lt;p&gt;One other mechanism that is not as fancy, but simple, is the &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_versions&lt;/code&gt; macro. If &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeDependency&lt;/code&gt; defines a &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeDependency::VERSION&lt;/code&gt; (as it is encouraged by the init template), then &lt;code class=&quot;highlighter-rouge&quot;&gt;{% if compare_versions(AwesomeDependency::VERSION, &quot;2.0.0&quot;) &amp;gt;= 0 %}&lt;/code&gt; is available to use features only on 2.0.0 or later releases.&lt;/p&gt;

&lt;h2 id=&quot;advertised-version&quot;&gt;Advertised version&lt;/h2&gt;

&lt;p&gt;If the 3.x version of AwesomeDependency is being developed, we encourage you to set &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeDependency::VERSION&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;3.0.0-dev&quot;&lt;/code&gt; or something alike. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;3.0.0&quot;&lt;/code&gt; may be good enough, but some prefer to keep that value for the tagged release only.&lt;/p&gt;

&lt;p&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeDependency::VERSION&lt;/code&gt; is not increased &lt;em&gt;during&lt;/em&gt; the development of 3.x and is kept as the latest 2.x release, then it will be impossible to use &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_versions&lt;/code&gt; to check for 3.x.&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeDependency::VERSION = &quot;3.0.0-dev&quot;&lt;/code&gt; and we want to start supporting that version in our development branch, we will need to use something like &lt;code class=&quot;highlighter-rouge&quot;&gt;{% if compare_versions(AwesomeDependency::VERSION, &quot;3.0.0-0&quot;) &amp;gt;= 0 %}&lt;/code&gt;, with a trailing &lt;code class=&quot;highlighter-rouge&quot;&gt;-0&lt;/code&gt;. This is because &lt;code class=&quot;highlighter-rouge&quot;&gt;3.0.0-0 &amp;lt; 3.0.0-a &amp;lt; 3.0.0-dev &amp;lt; 3.0.0-z &amp;lt; 3.0.0&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;declaring-dependencies&quot;&gt;Declaring dependencies&lt;/h1&gt;

&lt;p&gt;At this point, we need to mention how dependencies can be declared. As mentioned before, on a tagged release, the &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; acts as a contract. This contract states what are the supported versions of each dependency. Shards allows us to declare dependencies, not only as version ranges, but also on a branch, or with no version. Still, I would recommend using version ranges, with lower and upper bound versions, on every formal release of a shard. The other variations should be limited to applications with a &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.lock&lt;/code&gt; or work in progress.&lt;/p&gt;

&lt;p&gt;My recommendation is that dependencies are declared as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~&amp;gt; 0.9.2&lt;/code&gt; (ie: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 0.9.2, &amp;lt; 0.10&lt;/code&gt;) for 0.x versions dependencies, since the next minor release can have breaking changes.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~&amp;gt; 2.2&lt;/code&gt; (ie: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 2.2, &amp;lt; 3.0&lt;/code&gt;) for non 0.x dependencies where any patch level would work.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~&amp;gt; 2.2, &amp;gt;= 2.2.3&lt;/code&gt; (ie: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 2.2.3, &amp;lt; 3.0&lt;/code&gt;) for non 0.x dependencies where at least certain patch is required. Potentially, this could be the current patch version if you want.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 2.2.3, &amp;lt; 5.0.0&lt;/code&gt; for cases where you want to support a wide range of versions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;~&amp;gt; 0.9&lt;/code&gt;, without a patch number, is &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 0.9, &amp;lt; 1.0&lt;/code&gt;. This might be too optimistic for a 0.x dependency, so I would discourage it.&lt;/p&gt;

&lt;p&gt;You might be tempted to say &lt;em&gt;any version is fine&lt;/em&gt; but: Did you check older versions to honor that contract? Are you sure that future versions will be supported? Each dependency might be different: in some cases you might be able to feel more secure about this, depending on the author, maintainer and scope of the shard.&lt;/p&gt;

&lt;p&gt;Assuming we are on board with having the above recommendations on the tagged releases of our shard, we can move on to the next topic: How can we check our shard against upcoming or recently released versions of our dependencies.&lt;/p&gt;

&lt;p&gt;My pick is to have the supported versions of the dependencies in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; of the development branch. That is, exactly as they will be published upon release.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/crystal-lang/shards/pull/422&quot;&gt;shards override feature&lt;/a&gt; in &lt;a href=&quot;https://crystal-lang.org/2020/08/06/shards-0.12.0-released.html&quot;&gt;Shards v0.12&lt;/a&gt; we can have a &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.edge.yml&lt;/code&gt; file were we can force the usage of the development branch of &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeDependency&lt;/code&gt;, locally or on a CI, and use the &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_versions&lt;/code&gt; or other mechanism to check against unreleased changes of that dependency.&lt;/p&gt;

&lt;p&gt;We can also have multiple overrides files if we want to check individual dependencies.&lt;/p&gt;

&lt;p&gt;If this mechanism is used with a cron on the CI we will have nightly checks of the dependencies.&lt;/p&gt;

&lt;p&gt;Another alternative would be to set version ranges on dependencies only when releasing our shard. This would leave unrestricted dependencies in our development branch, but I think that that will require more work upon release, and it will still require the override to avoid picking the latest release by default.&lt;/p&gt;

&lt;h1 id=&quot;moving-to-crystal-10&quot;&gt;Moving to Crystal 1.0&lt;/h1&gt;

&lt;p&gt;So far we haven’t mentioned Crystal 1.0. What’s the deal with this release or any other major releases? The shards out in the wild declare which std-lib and language version they work with.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal:&lt;/code&gt; property in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; declares this. Out in the wild, almost every shard has an implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt; 1.0&lt;/code&gt; right now. When using &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal: x.y[.z]&lt;/code&gt;, it is interpreted that the shard will work with &lt;code class=&quot;highlighter-rouge&quot;&gt;~&amp;gt; x.y, &amp;gt;= x.y.z&lt;/code&gt; (ie: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= x.y.z, &amp;lt; (x+1).0.0&lt;/code&gt;) of the std-lib and language version. This is the same as one of the previously suggested version restriction patterns.&lt;/p&gt;

&lt;p&gt;As with any dependency, we are free to state that any crystal version will work with our release &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal: *&lt;/code&gt;, or remove the upper bound &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal: &amp;gt; 0.35&lt;/code&gt;. But again, how can you be sure of that claim?&lt;/p&gt;

&lt;p&gt;Up until now, checking if a shard can work with the upcoming Crystal release required us to use a Crystal nightly build. We still need to do this, but the Crystal nightlies release has a &lt;code class=&quot;highlighter-rouge&quot;&gt;1.0.0-dev&lt;/code&gt; version currently.&lt;/p&gt;

&lt;p&gt;Since the Crystal version we are using is &lt;code class=&quot;highlighter-rouge&quot;&gt;1.0.0-dev&lt;/code&gt;, shards out in the wild are not candidates. And it is possible that they won’t be available until a 1.x tag is released. How could that be?&lt;/p&gt;

&lt;p&gt;To avoid locking us in this, or other major Crystal release, the &lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt; Shards option can be used. It will not be needed when migrating from Crystal 1.0 to 1.1, but it will come handy again when Crystal 2.0 is developed.&lt;/p&gt;

&lt;p&gt;You can set the &lt;code class=&quot;highlighter-rouge&quot;&gt;SHARDS_OPTS&lt;/code&gt; environment variable to &lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt; in your CI if the &lt;code class=&quot;highlighter-rouge&quot;&gt;shards install&lt;/code&gt; command is performed implicitly along the way.&lt;/p&gt;

&lt;h1 id=&quot;preparing-all-the-ecosystem-for-crystal-10&quot;&gt;Preparing all the ecosystem for Crystal 1.0&lt;/h1&gt;

&lt;p&gt;Let’s revisit the whole state with a more concrete hypothetical (and pessimistic) example. We are the authors of &lt;code class=&quot;highlighter-rouge&quot;&gt;BelovedShard&lt;/code&gt; that depends on &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeShard&lt;/code&gt;. So far everything is working on Crystal 0.35. &lt;code class=&quot;highlighter-rouge&quot;&gt;BelovedShard&lt;/code&gt; is in &lt;code class=&quot;highlighter-rouge&quot;&gt;1.5.0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeShard&lt;/code&gt; is in &lt;code class=&quot;highlighter-rouge&quot;&gt;2.2.3&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# BelovedShard's shard.yml file&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;beloved_shard&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1.5.0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;acme/awesome_shard&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;~&amp;gt; 2.2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;crystal&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.35&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# AwesomeShard's shard.yml file&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;awesome_shard&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.2.3&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;crystal&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.35&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;When trying to use Crystal 1.0.0-dev on &lt;code class=&quot;highlighter-rouge&quot;&gt;BelovedShard&lt;/code&gt;, we might stumble onto some issues with &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeShard&lt;/code&gt; and we might not be a maintainer of it. Thanks to Shards override you can fork and change the source of the awesome shard to it.&lt;/p&gt;

&lt;p&gt;Whether the Awesome fix is done in the main repo, or in a fork, or in the development branch, or in a &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal/1.0&lt;/code&gt; branch, it does not make too much of a difference. All this information will be stated in the shard override file.&lt;/p&gt;

&lt;p&gt;The important question is: Which Crystal versions will the next version of Awesome support: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 1.0, &amp;lt; 2.0&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 0.35, &amp;lt; 2.0&lt;/code&gt;? This should guide us when changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal:&lt;/code&gt; property in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt;, and also tell us if we need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_versions(Crystal::VERSION, &quot;1.0.0-0&quot;)&lt;/code&gt; or not.&lt;/p&gt;

&lt;p&gt;Changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; is not required right from the start. This can be delayed thanks to &lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt;, but it is a good practice to have a clear idea of what the goal is for that property, since it affects the code to be written.&lt;/p&gt;

&lt;p&gt;Let’s suppose that AwesomeShard was fixed for Crystal 1.0.0-dev in it’s development branch. It will support 1.0 only upon release, but for now &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal: 0.35&lt;/code&gt; is still there, since it might want to release a &lt;code class=&quot;highlighter-rouge&quot;&gt;2.2.4&lt;/code&gt; patch before Crystal 1.0 is released. This means that changes to Awesome use &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_versions&lt;/code&gt; and sometime, after Crystal 1.0 is released, those checks will go away and drop support for 0.35.&lt;/p&gt;

&lt;p&gt;More importantly, this means that the development branch of Awesome &lt;em&gt;should&lt;/em&gt; work with Crystal 1.0.0-dev.&lt;/p&gt;

&lt;p&gt;Now let’s focus on BelovedShard where we want the same: the development branch should work with Crystal 1.0.0-dev. But we don’t want to wait for Awesome to be released.&lt;/p&gt;

&lt;p&gt;In our CI (or sometimes locally) we can use the following setup to accomplish that:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# BelovedShard's override file shard.edge.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;acme/awesome_shard&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;develop&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;SHARDS_OPTS=--ignore-crystal-version&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SHARDS_OVERRIDE=shard.edge.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will make the &lt;code class=&quot;highlighter-rouge&quot;&gt;shards install&lt;/code&gt; command use the development branch of Awesome, and it will not complain about the Crystal version mismatch (we are running a Crystal 1.x, but shard.yml in awesome states &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= 0.35, &amp;lt; 1.0&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;While changing BelovedShard we might need to &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_versions(Crystal::VERSION, &quot;1.0.0-0&quot;)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_versions(Awesome::VERSION, &quot;2.3.0-0&quot;)&lt;/code&gt;. But our development branch is able to move forward and stay up to date with Crystal and Awesome. Awesome!&lt;/p&gt;

&lt;p&gt;While Crystal 1.0.0-dev keeps evolving, we can iterate on both shards.&lt;/p&gt;

&lt;p&gt;Once Crystal 1.0 is released, each shard will make the explicit decision about which version of the std-lib and language is supported. This will trigger changes in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; and maybe some code clean-ups.&lt;/p&gt;

&lt;h1 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h1&gt;

&lt;p&gt;There are other workflows to keep things up to date. This is just one option.&lt;/p&gt;

&lt;p&gt;As a community, other patterns might appear or be preferred in the long run. The recent changes in Shards aimed to provide at least one option that works and can be adapted to some extent.&lt;/p&gt;

</description>
        <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/08/20/preparing-our-shards-for-crystal-1.0.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/08/20/preparing-our-shards-for-crystal-1.0.html</guid>
      </item>
    
      <item>
        <title>Shards 0.12.0 がリリースされました！</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/shards/releases/tag/v0.12.0&quot;&gt;Shards 0.12.0&lt;/a&gt; がリリースされました！&lt;/p&gt;

&lt;p&gt;この Shards のリリースではいくつかのかすり傷のような問題を解決して、言語の異なるバージョンに対して機能する健全なパッケージエコシステムを手軽に可能にする機能を追加し、加えてあちこちを修正する際の摩擦を減らすことにフォーカスしています。&lt;a href=&quot;https://github.com/crystal-lang/shards/releases/tag/v0.12.0&quot;&gt;リリースのチェンジログ&lt;/a&gt;にも目を通してください。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意: この新しいリリースを使うには、Shards をソースコードからビルドするか、1.0.0-pre1 の Crystal がリリースされるまではナイトリー版の Crystal を使う必要があります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;依存関係の &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; ファイルがエラーを起こしたときに、より適切なエラーメッセージが表示されるようになりました。この改善は &lt;a href=&quot;https://github.com/crystal-lang/shards/pull/408&quot;&gt;#408&lt;/a&gt; によるものです。&lt;/p&gt;

&lt;p&gt;開発の際、依存関係をフォークしたものに切り替えることがあります。このシナリオは複数のコマンドで適切に処理されていませんでしたが、今回のリリースで修正されています。可能なら、Shards は元の依存関係の変更に関わらずバージョン選択を尊重するようにします。もしフォーク元の依存関係が曖昧であれば、エラーが表示されます。&lt;/p&gt;

&lt;p&gt;フォーク元の依存関係が曖昧であるというのは、例えば、もしアプリケーションがパッケージ &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; を要求していて、2つが &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; を要求しているにも関わらず、どちらも異なるフォークを参照している場合などがあります。詳細は&lt;a href=&quot;https://github.com/crystal-lang/shards/pull/419&quot;&gt;#419&lt;/a&gt;と&lt;a href=&quot;https://github.com/crystal-lang/shards/pull/429&quot;&gt;#429&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;前回のリリースで crystal プロパティが必須になり、そのパッケージが期待するコンパイラと標準ライブラリのバージョンを指定できるようになりました。同時に、&lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt; が追加され、このチェックを無視できるようにもなっています。しばしば Shards を指定したものとは異なるバージョンの Crystal と共に動作させたい場合があります。ライブラリのメンテナが、サポートする Crystal のバージョンを選択するときやテストやリリースの際などに、そのような状況になります。&lt;/p&gt;

&lt;p&gt;破壊的変更の起こりうる Crystal のバージョン (0.x から 1.x や 1.x から 2.x など) が開発されている間は、プロジェクトの CI でナイトリー版を使い &lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt; を指定するのは合理的でしょう。ですが、一度安定版がリリースされてエコシステムがそれに並べば、&lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt; は必要なくなります。なお、crystal プロパティは依存関係解決の探索空間を枝刈りするのにも役立っています。&lt;/p&gt;

&lt;p&gt;このリリースでは、Shards は &lt;code class=&quot;highlighter-rouge&quot;&gt;SHARDS_OPTS&lt;/code&gt; 環境変数を読み取って、追加の CLI オプションとして認識するようになりました。なので、CI のどこかで &lt;code class=&quot;highlighter-rouge&quot;&gt;shards install&lt;/code&gt; が実行されている場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;SHARDS_OPTS=--ignore-crystal-version&lt;/code&gt; が利用できます。詳細は&lt;a href=&quot;https://github.com/crystal-lang/shards/pull/417&quot;&gt;#417&lt;/a&gt;と&lt;a href=&quot;https://github.com/crystal-lang/shards/pull/420&quot;&gt;#420&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;このリリースの特筆すべき機能は shards のオーバライドです。この機能はまだ初期段階なので、フィードバックをお待ちしています。この機能をリリースすることで可能になるワークフローや単純化されるものがあり、今後の Crystal のメジャーリリースを補助するものになることを期待しています。この機能は&lt;a href=&quot;https://github.com/crystal-lang/shards/pull/422&quot;&gt;#422&lt;/a&gt;で実装され、動機は&lt;a href=&quot;https://github.com/crystal-lang/shards/issues/412&quot;&gt;#412&lt;/a&gt;で説明されています。&lt;/p&gt;

&lt;p&gt;ローカルでのオーバーライド機能は &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.override.yml&lt;/code&gt; ファイルを用意するか、&lt;code class=&quot;highlighter-rouge&quot;&gt;SHARDS_OVERRIDE&lt;/code&gt; 環境変数で指定したファイルを用意することで有効になります。もし依存関係がオーバーライドファイルに載っていた場合、その他の依存関係のグラフの状態に関わらず、そのバージョンが使われることになります。&lt;/p&gt;

&lt;p&gt;上記のロジックによって、次の場合のワークフローが単純化されるでしょう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ある shard の開発者が、新バージョンをリリースして使えるようにする代わりに、手元の開発版のコピーを使いたいとき。&lt;/li&gt;
  &lt;li&gt;中間の依存関係が新しいバージョンの依存関係と衝突しているのを回避したいとき。&lt;/li&gt;
  &lt;li&gt;わざわざフォークしたり依存関係をいじったりしなくても、深いところにある依存関係のパッチを当てることができます。&lt;/li&gt;
  &lt;li&gt;開発ワークフローを複雑にすることなく、依存関係の上流の開発版に対するテストをすることもできます。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あなたならこの機能をどのようにして使いますか？&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/08/06/shards-0.12.0-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/08/06/shards-0.12.0-released.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.35.1がリリースされました！</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.35.1&quot;&gt;Crystal 0.35.1&lt;/a&gt; がリリースされました。&lt;/p&gt;

&lt;p&gt;このリリースは0.35.0ほど刺激的なものではありません。もしこちらのアナウンスを見ていなければ、&lt;a href=&quot;/2020/06/09/crystal-0.35.0-released.html&quot;&gt;こちらをまず読んでください&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;このパッチリリースは最近の追加や2つのリグレッションの修正を反映させるものです。&lt;/p&gt;

&lt;p&gt;5人のコントリビュータによって&lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.35.0...0.35.1&quot;&gt;0.35.0から13のコミットが&lt;/a&gt;ありました。&lt;/p&gt;

&lt;p&gt;それでは今回のリリースのハイライトを紹介していきます。ですが、&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.35.1&quot;&gt;リリースのチェンジログ&lt;/a&gt;にもたくさんの価値ある情報があることを忘れないでください。&lt;/p&gt;

&lt;h2 id=&quot;標準ライブラリ&quot;&gt;標準ライブラリ&lt;/h2&gt;

&lt;p&gt;0.35.0で導入された&lt;code class=&quot;highlighter-rouge&quot;&gt;IO#write&lt;/code&gt;の変更が取り消されることになりました。以前のように&lt;code class=&quot;highlighter-rouge&quot;&gt;Nil&lt;/code&gt;を返すことになります。この意図的な変更は想定以上に破壊的でした。振り回してしまったことをお詫びします。&lt;/p&gt;

&lt;p&gt;このため、0.35.0向けにアップデートした shard については、0.35.0と十分に比較する必要があります。0.35.0 向けにアップデートしていない shard はとくに追加で何かすることはありません。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9469&quot;&gt;#9469&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;OpenSSL クライアントのコンテキストは利便性のため、デフォルトでやや厳格でない暗号も設定されるようになりました。サーバーのコンテキストはよりセキュアなものになっています。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9459&quot;&gt;#9459&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;h2 id=&quot;次のステップ&quot;&gt;次のステップ&lt;/h2&gt;

&lt;p&gt;Crystal をアップデートしてください。そして、問題の報告を心待ちにしています。私たちは1.0.0に向けての開発を始めています。1.0.0-preX のようなリリースをして、最終的な調整を重ねていくでしょう。&lt;/p&gt;

&lt;p&gt;すべての非推奨にした定義は1.0では削除される予定です。1.0をクリーンなバージョンにしたいと思っています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;、&lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt;、そして大勢の&lt;a href=&quot;/sponsors&quot;&gt;スポンサー&lt;/a&gt;の継続的なサポートにたくさんの感謝をします。継続的に開発・メンテナンスを続けていくには、寄付が不可欠です。&lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; で受け付けています。Crystal の直接のスポンサーになりたい場合や、他のサポート方法を見つけた場合は、&lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; に連絡してください。それでは、ここまで読んでいただきありがとうございます！&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/06/19/crystal-0.35.1-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/06/19/crystal-0.35.1-released.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.35.0がリリースされました！</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.35.0&quot;&gt;Crystal 0.35.0&lt;/a&gt; がリリースされました。&lt;/p&gt;

&lt;p&gt;今回のリリースはみなさんの待ち望んでいた、1.0直前の標準ライブラリに磨きをかけるものです。この中には最近のいくつかの追加やより洗練された実装の繰り返しといった、多くの活動があります。他には、デバッグの改善や Windows のサポート、その他のプラットフォームでのランタイムの安定化などを含みます。&lt;/p&gt;

&lt;p&gt;このリリースが最後のバージョン 0.x のリリースになるでしょう。1.0.0-preX のリリースに向けて準備をしていてください。&lt;/p&gt;

&lt;p&gt;38人のコントリビューターによって&lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.34.0...0.35.0&quot;&gt;0.34.0から242のコミット&lt;/a&gt;がありました。&lt;/p&gt;

&lt;p&gt;それでは今回のリリースのハイライトを紹介していきます。たくさんの紹介するものがあります。ですが、&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.35.0&quot;&gt;リリースのチェンジログ&lt;/a&gt;にもたくさんの価値ある情報があることを忘れないでください。&lt;/p&gt;

&lt;h2 id=&quot;言語の変更&quot;&gt;言語の変更&lt;/h2&gt;

&lt;h3 id=&quot;網羅性チェック-テイク2&quot;&gt;網羅性チェック (テイク2)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/2020/04/06/crystal-0.34.0-released.html#exhaustive-case&quot;&gt;前回のリリース&lt;/a&gt;で、コンパイラは case 文の条件節の網羅性チェックをするようになりました。ですが、フィーバックを受けて、次のことを決定しました。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;case ... when&lt;/code&gt; を前のように戻す。暗黙の &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt; があって、条件節は網羅的でなくてもよい。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;case ... in&lt;/code&gt; 文を実験的に導入する。こちらは暗黙の &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; を持たず、条件の網羅性が確認できなければコンパイルが通らない。実験的というのはフォードバックを元に変更される可能性がある、ということです。たとえマイナーリリースの間でも、その変更は行なわれる可能性があります。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この決定によって &lt;code class=&quot;highlighter-rouge&quot;&gt;case ...  when&lt;/code&gt; の意味は身近なままとなり、既存のコードに影響することなく網羅性チェックをする case 文を洗練させていくことが可能になります。より詳細な議論は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9258&quot;&gt;#9258&lt;/a&gt;と&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9045&quot;&gt;#9045&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Compiles! Totally fine&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Error: missing case String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;この変更によって &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; が正式なキーワードとなりました。これは破壊的な変更ですが、&lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; はこれまでもマクロ中ではキーワードとして扱われていました。&lt;/p&gt;

&lt;h2 id=&quot;コンパイラ&quot;&gt;コンパイラ&lt;/h2&gt;

&lt;p&gt;コンパイラに破壊的な変更があり、コンパイラの CLI がシバン &lt;code class=&quot;highlighter-rouge&quot;&gt;#!&lt;/code&gt; によるスクリプトをより安心して動作させられるようになりました。これからは、コマンドの代わりにファイルを引数にしてコンパイラを実行すると (&lt;code class=&quot;highlighter-rouge&quot;&gt;crystal path/to/file.cr arg1 arg2&lt;/code&gt; のように)、ファイルがコンパイルされて、そしてそれを実行する、という動作をします。このとき、引数はプログラムにだけ影響して、コンパイラに影響しない、ということです。&lt;/p&gt;

&lt;p&gt;コンパイラフラグを使いたい場合や引数と共にプログラムを実行したい場合は、次のように run コマンドが使えます。&lt;code class=&quot;highlighter-rouge&quot;&gt;crystal run path/to/file.cr -Dcompiler_flag --release -- arg1 arg2&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; はコンパイラのオプションとプログラムのオプションを切り分けます。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9171&quot;&gt;#9171&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;他の破壊的な変更としては、&lt;code class=&quot;highlighter-rouge&quot;&gt;crystal env&lt;/code&gt; がシェル向けにクオートをするようになりました。つまり、&lt;code class=&quot;highlighter-rouge&quot;&gt;eval &quot;$(crystal env)&quot;&lt;/code&gt; が安全にできるようになったということです。また、&lt;code class=&quot;highlighter-rouge&quot;&gt;crystal env VARIABLE&lt;/code&gt; はこれまでの通りです。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9428&quot;&gt;#9428&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;パーサーはたくさんの愛を受けました。エッジケースの修正や、そこそこのリファクタリングが&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9208&quot;&gt;#9208&lt;/a&gt;でされています。&lt;/p&gt;

&lt;p&gt;言語のいくつかの機能はより良い動作のために反芻が必要でした。このリリースではオートキャストが多重ディスパッチやユニオンのデフォルト値に対して動作するようになりました。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9004&quot;&gt;#9004&lt;/a&gt;と&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9366&quot;&gt;#9366&lt;/a&gt;を確認してください。これはいくつかの場合の予期しない残念な挙動を解決するでしょう。&lt;/p&gt;

&lt;p&gt;既存の機能の改善の背景には、Crystal のデバッグ機能の改善を待ち望まれていたことがあります。この改善はまだ完了してはいませんが、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8538&quot;&gt;#8538&lt;/a&gt;で大きな一歩を踏み出すことができました。この &lt;a href=&quot;https://dev.to/bcardiff/debug-crystal-in-vscode-via-codelldb-3lf&quot;&gt;VSCode で Crystal のプログラムをどうやってデバッグするかを説明した記事&lt;/a&gt;で、どう設定すれば良いかや、スクリーンショットを確認できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@[Link]&lt;/code&gt; アノテーションは少しだけ再デザインされました。pkg-config とより統合されて、&lt;code class=&quot;highlighter-rouge&quot;&gt;static:&lt;/code&gt; オプションのサポートが無くなりました。これによって将来、デフォルト値をいい感じに提供しつつ、リンクを詳細に設定できるようにすることを見据えています。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8972&quot;&gt;#8972&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crystal パッケージのメンテナにとって&lt;/strong&gt;、コンパイラをビルドする際に&lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_CONFIG_PATH&lt;/code&gt; が標準ライブラリのパスのみを必要とするようになったという知らせは価値があるでしょう。&lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt; ディレクトリはコンパイラによって常に含まれるようになりました。将来的には shaeds のインストールパスを細かく設定できるようにしたいと考えています。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9315&quot;&gt;#9315&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;その他の変更として、&lt;code class=&quot;highlighter-rouge&quot;&gt;SOURCE_DATE_EPOCH&lt;/code&gt; という環境変数を使うことでコンパイラをビルドする際にソースコードの時刻を伝えることができるようになりました。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9088&quot;&gt;#9088&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;h2 id=&quot;shards&quot;&gt;Shards&lt;/h2&gt;

&lt;p&gt;Shards v0.11.1 が今回のリリースではバンドルされます。&lt;/p&gt;

&lt;p&gt;今回の把握すべき主要な変更は &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal:&lt;/code&gt; プロパティが&lt;strong&gt;効果的に機能する&lt;/strong&gt;ようになった点です。このプロパティは、有効な shard のバージョンを Crystal 環境に基いて決定するのに使われます。詳細は動作は &lt;a href=&quot;https://github.com/crystal-lang/shards/blob/v0.11.1/SPEC.md#crystal&quot;&gt;shards/SPEC.md&lt;/a&gt; を確認してください。&lt;/p&gt;

&lt;p&gt;後方互換性のために &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal:&lt;/code&gt; プロパティが &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; に無かった場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt; 1.0.0&lt;/code&gt;として解釈されます。よって、Crystal 1.0.0 まではそのままでも動作し続けるでしょう。また、この挙動が不便な場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt; を渡すことでこのチェックを無視できます。&lt;/p&gt;

&lt;p&gt;利用者の期待を高めるには、依存するバージョンを明示する必要があると考えられます。そして、標準ライブラリや言語のバージョンもまた依存関係なのです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;crystal:&lt;/code&gt; プロパティの動作は依存関係のバージョン指定とほとんど同じように動作します。違いは、利便性のため &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal: x.y.z&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;~&amp;gt; x.y, &amp;gt;= x.y.z&lt;/code&gt; のように (つまり、 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= x.y.z, &amp;lt; (x+1).0.0&lt;/code&gt;) 解釈されることです。この結果、任意の&lt;strong&gt;メジャー&lt;/strong&gt;リリースで何らかの対応が必要になります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shards install&lt;/code&gt; を現在のプロジェクトで実行することを推奨します。これによって、&lt;code class=&quot;highlighter-rouge&quot;&gt;shard.lock&lt;/code&gt; がいくつかの追加の新しいバージョンのフォーマットを持つことに気付くかもしれません。そして、&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/.shards.info&lt;/code&gt; ファイルがインストールした依存関係を説明するものとして追加されています。この新しいファイルはバージョン管理システムでトラックする必要はありません。&lt;/p&gt;

&lt;p&gt;最後に、依存関係のバージョン指定で &lt;code class=&quot;highlighter-rouge&quot;&gt;version: &amp;gt;= 1.0.0, &amp;lt; 2.0&lt;/code&gt; のように複数の指定を交差させられるようになったことを紹介します。&lt;/p&gt;

&lt;p&gt;このバージョンでの shards の完全な変更のリストは&lt;a href=&quot;https://github.com/crystal-lang/shards/releases/tag/v0.11.0&quot;&gt;チェンジログ&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;h2 id=&quot;標準ライブラリ&quot;&gt;標準ライブラリ&lt;/h2&gt;

&lt;p&gt;このリリースにはいくつもの破壊的変更が含まれます。それらの大半は普通、非推奨の警告が出るようになっています。標準ライブラリの整理なしに1.0へと進むことはないつもりです。このような整理は以前にもあったはずです。これに優先順位を付けることは簡単ではなく、地道に進めています。&lt;/p&gt;

&lt;p&gt;計算結果の出力や入力に &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; を引数に取る多くのメソッドがあります。&lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/5916&quot;&gt;#5916&lt;/a&gt; で、このような引数を最初の引数にすることを標準化する提案がありました。これは &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9134&quot;&gt;#9134&lt;/a&gt; といくつかのそれに続く PR で実現されました。&lt;/p&gt;

&lt;p&gt;これらのすべての &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; メソッドに関係して、&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; クラスのメソッドで、&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; の値を返すものについて、値を返すのではなく結果を &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; に書き込むようなオーバロードが追加されました。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9236&quot;&gt;#9236&lt;/a&gt;を確認してください。この影響を受けるのは &lt;code class=&quot;highlighter-rouge&quot;&gt;#underscore&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#titleize&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#capitalize&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#upcase&lt;/code&gt;、そして&lt;code class=&quot;highlighter-rouge&quot;&gt;#downcase&lt;/code&gt; といったメソッドです。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;文字列のインターポレーションの際に生成された文字列が直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; に渡されるようにするための改善の提案として、&lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/9291&quot;&gt;#9291&lt;/a&gt;に目を通しておくといいでしょう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;その他の &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; の破壊的な変更としては、&lt;code class=&quot;highlighter-rouge&quot;&gt;#skip&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#write&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#write_utf8&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#write_byte&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#write_bytes&lt;/code&gt;、や&lt;code class=&quot;highlighter-rouge&quot;&gt;#skip_to_end&lt;/code&gt; がスキップした/書き込んだバイト数の数値を返すようになったことがあります。これは他の言語でもそのようになっており、書き込み中に追加の呼び出しなく現在のストリームを位置を把握できるようになります。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9233&quot;&gt;#9233&lt;/a&gt;と&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9363&quot;&gt;#9363&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@[Experimental]&lt;/code&gt; アノテーションという、ライブラリや言語、shardの部分に細心の注意と共に使う必要のあるという指定をするためのものが導入されました。実験的な (experimental) 機能は変更や破壊、もしくは削除を Semver の規約に関わらず行なっても良いものとします。今のところ、アノテーションはドキュメントジェネレータで利用されています。ですが、他にも追加の機能のアイディアがあります。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9244&quot;&gt;#9244&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Digest&lt;/code&gt; 型がリファクタリングされて、いくつかのメソッドの名前が変更されたことに注意する必要があるかもしれません。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8426&quot;&gt;#8426&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;さて、&lt;code class=&quot;highlighter-rouge&quot;&gt;OptionParser&lt;/code&gt; がサブコマンドを定義できるようになりました。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9009&quot;&gt;#9009&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;その他に整理したものとしては&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8886&quot;&gt;#8886&lt;/a&gt;で、&lt;code class=&quot;highlighter-rouge&quot;&gt;Flate&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Gzip&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Zip&lt;/code&gt;、そして&lt;code class=&quot;highlighter-rouge&quot;&gt;Zlib&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;Compress&lt;/code&gt; モジュールに移動されました。また、&lt;code class=&quot;highlighter-rouge&quot;&gt;Flate&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;Compress::Deflate&lt;/code&gt; に名前が変更されています。&lt;code class=&quot;highlighter-rouge&quot;&gt;require &quot;compress/gzip&quot;&lt;/code&gt; として、これらの定数を変更する必要があります。&lt;code class=&quot;highlighter-rouge&quot;&gt;require &quot;gzip&quot;&lt;/code&gt; は依然として有効ですが、警告メッセージが表示されることになります。&lt;/p&gt;

&lt;p&gt;いくつかの変更が &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;FileUtils&lt;/code&gt; にあります。これらは整理されて、強制する操作が両方の API で有効になりました。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9175&quot;&gt;#9175&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;h3 id=&quot;マクロ&quot;&gt;マクロ&lt;/h3&gt;

&lt;p&gt;クロスコンパイルの際、&lt;code class=&quot;highlighter-rouge&quot;&gt;host_flag?&lt;/code&gt; というマクロが追加されたことを知っておくと便利でしょう。これは &lt;code class=&quot;highlighter-rouge&quot;&gt;flag?&lt;/code&gt; のようなものですが、ホストのマシンで解決されます。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9049&quot;&gt;#9049&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;h3 id=&quot;数値計算&quot;&gt;数値計算&lt;/h3&gt;

&lt;p&gt;符号付きと符号無しの数値の混ざった演算のオーバーフローの検出が修正されました。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9403&quot;&gt;#9403&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Int#digits&lt;/code&gt; というメソッドが追加されて、一貫性のため &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInt#digits&lt;/code&gt; の出力が反転されました。詳細は &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9383&quot;&gt;#9383&lt;/a&gt; を確認してください。&lt;/p&gt;

&lt;h3 id=&quot;シリアライズ&quot;&gt;シリアライズ&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.mapping&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML.mapping&lt;/code&gt; を使っている場合は、&lt;a href=&quot;https://github.com/crystal-lang/json_mapping.cr&quot;&gt;github:crystal-lang/json_mapping.cr&lt;/a&gt; と &lt;a href=&quot;https://github.com/crystal-lang/yaml_mapping.cr&quot;&gt;github:crystal-lang/yaml_mapping.cr&lt;/a&gt; に移行してください。これらの機能は十分なものでしたが、現在は &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::Serializable&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML::Serializable&lt;/code&gt; がより良いものとしてあるため、標準ライブラリから削除されました。詳細は &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9272&quot;&gt;#9272&lt;/a&gt; を確認してください。&lt;/p&gt;

&lt;h3 id=&quot;時刻&quot;&gt;時刻&lt;/h3&gt;

&lt;p&gt;これからは &lt;code class=&quot;highlighter-rouge&quot;&gt;Time#to_rfc3339&lt;/code&gt; のデフォルトの精度は秒となり、それ以上の精度は出力されません。より細かな精度が必要な場合は &lt;code class=&quot;highlighter-rouge&quot;&gt;fraction_digits&lt;/code&gt; という名前付き引数に 0. 3, 6, 9 という精度の桁数を指定してください。&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9283&quot;&gt;#9283&lt;/a&gt; で、時刻に応じて小数点以下の秒を表示する機能を削除しています。&lt;/p&gt;

&lt;h3 id=&quot;ネットワーク&quot;&gt;ネットワーク&lt;/h3&gt;

&lt;p&gt;SSL サーバーのデフォルト値を&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9026&quot;&gt;#9026&lt;/a&gt;で更新しました。また、&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP::Server&lt;/code&gt; が SSL ハンドシェイク中に時折失敗する問題を&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9177&quot;&gt;#9177&lt;/a&gt;で修正しました。&lt;/p&gt;

&lt;p&gt;そして、&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP::Server&lt;/code&gt;に2つの破壊的な変更があります。エラーハンドリングとログまわりの処理を&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9115&quot;&gt;#9115&lt;/a&gt;で改善し、新しいログモジュールと統合しました。&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9210&quot;&gt;#9210&lt;/a&gt;で、&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP::Request#remote_address&lt;/code&gt; の型を &lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::Address?&lt;/code&gt; に変更しました。&lt;/p&gt;

&lt;h3 id=&quot;ログ&quot;&gt;ログ&lt;/h3&gt;

&lt;p&gt;まず初めに、&lt;a href=&quot;/2020/04/06/crystal-0.34.0-released.html&quot;&gt;0.34.0&lt;/a&gt;で導入した新しいログモジールを早期に試してフィードバックを送ってくださった皆様に感謝いたします。破壊的な変更を含むいくつかの変更点がありますが、それらは主要な API には影響しません。これらを組み合わせることで、追加の機能といくつかのユースケースでのパーフォマンスの改善を達成しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9293&quot;&gt;#9293&lt;/a&gt;で &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Severity::Warning&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;Warn&lt;/code&gt; へと名前を変更しました。&lt;code class=&quot;highlighter-rouge&quot;&gt;Log.warn { ... }&lt;/code&gt; がありましたが、これはそのままで、警告を表します。。この変更は &lt;code class=&quot;highlighter-rouge&quot;&gt;:warning&lt;/code&gt; やほとんどの環境変数経由での設定に影響します。同様に &lt;code class=&quot;highlighter-rouge&quot;&gt;Verbose&lt;/code&gt; を削除して、&lt;code class=&quot;highlighter-rouge&quot;&gt;Trace&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;Notice&lt;/code&gt; を &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9107&quot;&gt;#9107&lt;/a&gt;で追加しました。&lt;/p&gt;

&lt;p&gt;ログのセットアップがよりシンプルになりました。&lt;code class=&quot;highlighter-rouge&quot;&gt;Log.setup*&lt;/code&gt; 系の2つのメソッドがあります。これらのメソッドは常にソースとバックエンドの間のバインディングを完全に設定するでしょう。&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:debug&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# will show debug or above in the stdout for all source&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;db.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:trace&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# will show trace or above in the stdout for db.* sources and nothing else&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup_from_env&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# will grab the value of LOG_LEVEL env variable&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Log.setup_from_env&lt;/code&gt; が1つの環境変数を受け取って動作するようになったことにも注意してください。より柔軟なものが今後追加されるかもしれませんが、名前付き引数はより良い体験を提供するはずです。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9145&quot;&gt;#9145&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;各エントリはこれまでより、現在実行しているファイバーから取得したコンテキストの情報を持っていました。その &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Context&lt;/code&gt; の責務を &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Metadata&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Metadata::Value&lt;/code&gt; に分割することにしました。前者は&lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; から &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Metadata::Value&lt;/code&gt; へのハッシュのようなデータ構造ですが、アロケーションやアルゴリズム的な最適化がされています。これらは主に&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9227&quot;&gt;#9227&lt;/a&gt;と&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9295&quot;&gt;#9295&lt;/a&gt;で実装されました。これらのリファクタリングによって、クローンによって獲得していた &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Metadata::Value&lt;/code&gt; の不変性 (immutability) が無くなりました。&lt;/p&gt;

&lt;p&gt;ログエントリにローカルのメタデータや構造化された情報を追加したいという機能が望まれていました。もちろん、現在のファイバのコンテキストに対する変更や復旧が最小であるものが望ましいです。エントリが出力されていない場合は値の生成を省略するという当初の設計を保って、これを達成しました。&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Program started&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Program started&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# same as previous&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;User logged in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# local data&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;User logged in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_that_computes_hash_named_tuple_or_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;exception: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Oh no!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# with exception&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;exception: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Oh no!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# with exception, no local data&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;exception: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Oh no!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# same as previous&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;action: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log_in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# empty message&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;カスタムのログフォーマッタを作る方法は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9211&quot;&gt;#9211&lt;/a&gt;で再検討されました。ブロックや Proc からフォーマッタを作る方法はまだ利用できますが、文字列から直接フォーマッタを定義するシンプルな方法を確認してみてください。&lt;/p&gt;

&lt;p&gt;出力するログのエントリーをテストしたい場合、新しく追加された &lt;code class=&quot;highlighter-rouge&quot;&gt;Log.capture&lt;/code&gt; というヘルパーが利用できます。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9201&quot;&gt;#9201&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;h3 id=&quot;並行処理&quot;&gt;並行処理&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Concurrent::Future&lt;/code&gt; とトップレベルの &lt;code class=&quot;highlighter-rouge&quot;&gt;delay&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;future&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;lazy&lt;/code&gt; を削除しました。これらを使い続けたい場合 &lt;a href=&quot;https://github.com/crystal-community/future.cr&quot;&gt;github:crystal-community/future.cr&lt;/a&gt; shard を利用してください。詳細は &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9093&quot;&gt;#9093&lt;/a&gt; を確認してください。&lt;/p&gt;

&lt;p&gt;その他に&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9097&quot;&gt;#9097&lt;/a&gt;で &lt;code class=&quot;highlighter-rouge&quot;&gt;parallel&lt;/code&gt; マクロが削除されました。&lt;/p&gt;

&lt;p&gt;1.0 以降に向けて、より堅牢で様々な利用に耐えうるもの開発したいと考えています。&lt;/p&gt;

&lt;h3 id=&quot;ランタイム&quot;&gt;ランタイム&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Process#signal&lt;/code&gt; があるので &lt;code class=&quot;highlighter-rouge&quot;&gt;Process#kill&lt;/code&gt; を非推奨としました。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9006&quot;&gt;#9006&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;また &lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt; も非推奨となりました。これはマルチスレッド環境では有効ではありません。この変更が問題である場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;Process.fork&lt;/code&gt; はまだ利用できるのでそちらを使ってください。しかし、このメソッドはもはや公開された API ではありません。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9136&quot;&gt;#9136&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;h3 id=&quot;プラットフォーム&quot;&gt;プラットフォーム&lt;/h3&gt;

&lt;p&gt;macOS ユーザーへ、10.15 (Catalina) で起こるいくつかの互換性の問題を&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9296&quot;&gt;#9296&lt;/a&gt;で修正しました。&lt;/p&gt;

&lt;p&gt;BSD のユーザーヘ、DragonFly(BSD) のサポートを&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9178&quot;&gt;#9178&lt;/a&gt;で追加しました。&lt;/p&gt;

&lt;p&gt;musl ユーザーへ、奇妙な segfaults が&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9238&quot;&gt;#9238&lt;/a&gt;で、バックトレースが空になる問題が&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9267&quot;&gt;#9267&lt;/a&gt;で修正されました。&lt;/p&gt;

&lt;p&gt;Windows ユーザーへはたくさんのお知らせがあります。現在進行中の取り組みを見るには &lt;a href=&quot;https://github.com/crystal-lang/crystal/wiki/Porting-to-Windows&quot;&gt;Wiki ページ&lt;/a&gt;や&lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/5430&quot;&gt;#5430&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;今回のリリースでの Windows 向けの変更としては次のようなものがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; の改善が&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9015&quot;&gt;#9015&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9038&quot;&gt;#9038&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9037&quot;&gt;#9037&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9257&quot;&gt;#9257&lt;/a&gt;で行なわれました。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; の振舞いが&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9207&quot;&gt;#9207&lt;/a&gt;でアラインメントされました。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Process&lt;/code&gt; が&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9047&quot;&gt;#9047&lt;/a&gt;と&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9021&quot;&gt;#9021&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9122&quot;&gt;#9122&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9112&quot;&gt;#9112&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9149&quot;&gt;#9149&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9310&quot;&gt;#9310&lt;/a&gt;で実装されました。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;crystal spec&lt;/code&gt; コマンドが Windows のパスで動作するように&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9234&quot;&gt;#9234&lt;/a&gt;で修正されました。&lt;/li&gt;
  &lt;li&gt;そして、コンパイラ自身を Windows 上でブートストラップできるようになりました。&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9054&quot;&gt;#9054&lt;/a&gt;、 &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9062&quot;&gt;#9062&lt;/a&gt;、 &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9095&quot;&gt;#9095&lt;/a&gt;、 &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9106&quot;&gt;#9106&lt;/a&gt;、 &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9307&quot;&gt;#9307&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ですが、まだ標準ライブラリのすべての部分が Windows で利用できるというというわけではないことには注意してください。&lt;/p&gt;

&lt;h3 id=&quot;ツール&quot;&gt;ツール&lt;/h3&gt;

&lt;p&gt;主要な変更はドキュメントジェネレータで、バージョンピッカーをサポートするようになりました。外部に &lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt; ファイルを用意して、現在と過去のリリースを指定することでバージョンピッカーに反映できます。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8792&quot;&gt;#8792&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9074&quot;&gt;#9074&lt;/a&gt;、それと&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9254&quot;&gt;#9254&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;h2 id=&quot;次のステップ&quot;&gt;次のステップ&lt;/h2&gt;

&lt;p&gt;Crystal をアップデートしてください。そして、問題の報告を心待ちにしています。私たちは1.0.0に向けての開発を始めています。1.0.0-preX のようなリリースをして、最終的な調整を重ねていくでしょう。&lt;/p&gt;

&lt;p&gt;ここ数回のリリースで修正が多かったことは認めます。ですが、不快感は最小になるように心掛けたつもりです。&lt;/p&gt;

&lt;p&gt;すべての非推奨にした定義は1.0では削除される予定です。1.0をクリーンなバージョンにしたいと思っています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;、&lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt;、そして大勢の&lt;a href=&quot;/sponsors&quot;&gt;スポンサー&lt;/a&gt;の継続的なサポートにたくさんの感謝をします。継続的に開発・メンテナンスを続けていくには、寄付が不可欠です。&lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; と &lt;a href=&quot;https://salt.bountysource.com/teams/crystal-lang&quot;&gt;Bountysource&lt;/a&gt; の2箇所で受け付けています。Crystal の直接のスポンサーになりたい場合や、他のサポート方法を探している場合は &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; に連絡してください。それでは、ここまで読んでいただきありがとうございます！&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/06/09/crystal-0.35.0-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/06/09/crystal-0.35.0-released.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.34.0 released!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.34.0&quot;&gt;Crystal 0.34.0&lt;/a&gt; has been released!&lt;/p&gt;

&lt;p&gt;Get excited because this release comes with some of the final touches to the language before 1.0: a better exception hierarchy to replace Errno, a new logging module, cleanups and fixes aiming for a better, more stable release, one that should make us all proud.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.33.0...0.34.0&quot;&gt;183 commits since 0.33.0&lt;/a&gt; by 26 contributors.&lt;/p&gt;

&lt;p&gt;Let’s get right into some of the highlights in this release. But don’t miss out on the rest of the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.34.0&quot;&gt;release changelog&lt;/a&gt; which has a lot of valuable information.&lt;/p&gt;

&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;

&lt;h3 id=&quot;exhaustive-case&quot;&gt;Exhaustive Case&lt;/h3&gt;

&lt;p&gt;From now on a &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; expression will no longer have an implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt;. This is useful to enable an exhaustive check across the &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; branches within the &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt;. If you are doing &lt;code class=&quot;highlighter-rouge&quot;&gt;case exp&lt;/code&gt; over a union or an enum value, and you are missing a &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; to cover some type or value, the compiler will let you know. Unless you have an &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; at the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: In this version, when the &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; does not cover all the possibilities, a warning is generated, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt; is implicitly added. In the next version it will produce a compile-time error and the implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt; will be gone.&lt;/p&gt;

&lt;p&gt;The following snippet complains about the missing &lt;code class=&quot;highlighter-rouge&quot;&gt;when Char&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'x'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;And the following snippet complains about the missing &lt;code class=&quot;highlighter-rouge&quot;&gt;when West&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Direction&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;North&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;South&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;East&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;West&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;North&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;north?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;south?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;east?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The only case that will still have an implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt; is when there is no expression and only a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; statements. This construction is equivalent to multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;elseif&lt;/code&gt; where there is an implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt; also.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;even?&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# if x.even?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# elsif y &amp;gt;= 0&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8424&quot;&gt;#8424&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;procs-subtyping&quot;&gt;Procs subtyping&lt;/h3&gt;

&lt;p&gt;While dealing with &lt;code class=&quot;highlighter-rouge&quot;&gt;Procs&lt;/code&gt; and callbacks it is common to not use the return value. In Crystal, that usually means returning &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. In regular methods you can specify the return type &lt;code class=&quot;highlighter-rouge&quot;&gt;: Nil&lt;/code&gt; to ignore the value of the last expression.&lt;/p&gt;

&lt;p&gt;The counterpart in &lt;code class=&quot;highlighter-rouge&quot;&gt;Procs&lt;/code&gt; is harder because there usually is no type annotation for the return type.&lt;/p&gt;

&lt;p&gt;For ease of use, we make it that any &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc(T)&lt;/code&gt; should be able to be used as a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc(Nil)&lt;/code&gt;. That is, ignoring the return value in runtime. So, for those that like formality, &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc(T) &amp;lt; Proc(Nil)&lt;/code&gt; is a valid subtyping rule now.&lt;/p&gt;

&lt;p&gt;There was a previous attempt to achieve something similar, but in this version, a better handling of that affair was implemented. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8970&quot;&gt;#8970&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;compiler&quot;&gt;Compiler&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;disable_overflow&lt;/code&gt; compiler flag is dropped. This means that the usual arithmetic operators will always have the overflow check. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;+&lt;/code&gt; and others to skip overflow checks. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8772&quot;&gt;#8772&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_OPTS&lt;/code&gt; environment variable can now be used to inject compiler options and flags implicitly. This is useful, for example, when the compiler is used in &lt;code class=&quot;highlighter-rouge&quot;&gt;post_install&lt;/code&gt; steps of shards and you want to enforce &lt;code class=&quot;highlighter-rouge&quot;&gt;--error-on-warnings&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8900&quot;&gt;#8900&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;LLVM 10 has just been released and we added support for it. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8940&quot;&gt;#8940&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The codegen for Windows has been improved to work without &lt;code class=&quot;highlighter-rouge&quot;&gt;--single-module&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8978&quot;&gt;#8978&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;shards&quot;&gt;Shards&lt;/h2&gt;

&lt;p&gt;A new version of Shards (0.10.0) has been released. Until now you probably have been using Shards 0.8.1 which lacks some features. Shards 0.9.0 polished many use cases, but it uses a SAT solver, which doesn’t scale. For Shards 0.10.0 we created &lt;a href=&quot;https://github.com/crystal-lang/crystal-molinillo&quot;&gt;crystal-molinillo&lt;/a&gt; a port of the dependency resolution algorithm used by &lt;a href=&quot;https://bundler.io/&quot;&gt;Bundler&lt;/a&gt; and &lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can read the rest of the updates in the &lt;a href=&quot;https://github.com/crystal-lang/shards/releases/tag/v0.10.0&quot;&gt;release changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will be eagerly waiting for feedback from you on Shards to polish it before 1.0.&lt;/p&gt;

&lt;h2 id=&quot;standard-library&quot;&gt;Standard library&lt;/h2&gt;

&lt;h3 id=&quot;errno-no-more&quot;&gt;Errno no more&lt;/h3&gt;

&lt;p&gt;Having as much as possible portable code is part of the goal of the std-lib. One of the areas that were in need of polishing was how &lt;code class=&quot;highlighter-rouge&quot;&gt;Errno&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;WinError&lt;/code&gt; were handled. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Errno&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;WinError&lt;/code&gt; exceptions are now gone, and were replaced by a new hierarchy of exceptions. Unfortunately, there is no easy way to make a smooth transition here with deprecation warnings. The &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Timeout&lt;/code&gt; exception was renamed to &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::TimeoutError&lt;/code&gt; to match the new hierarchy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeError&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Error&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IO::TimeoutError&lt;/code&gt; (inherits &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Error&lt;/code&gt;)&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File::Error&lt;/code&gt; (inherits &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Error&lt;/code&gt;)
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File::NotFoundError&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File::AccessDeniedError&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File::AlreadyExistsError&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::Error&lt;/code&gt; (inherits &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Error&lt;/code&gt;)
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::ConnectError&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::BindError&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, you can now use these new types to catch specific errors instead of checking &lt;code class=&quot;highlighter-rouge&quot;&gt;Errno&lt;/code&gt; values. We included the most used errors as classes. If there is no specific class, the base &lt;code class=&quot;highlighter-rouge&quot;&gt;File::Error&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::Error&lt;/code&gt; will be raised with a meaningful description.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Errno&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;WinError&lt;/code&gt; underlying value is still present if you need it, via the &lt;code class=&quot;highlighter-rouge&quot;&gt;SystemError&lt;/code&gt; module included in this new hierarchy. But it is better if you avoid using it.&lt;/p&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8885&quot;&gt;#8885&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;log&quot;&gt;Log&lt;/h3&gt;

&lt;p&gt;The former &lt;code class=&quot;highlighter-rouge&quot;&gt;Logger&lt;/code&gt; module is deprecated and will be removed soon. Its replacement is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Log&lt;/code&gt; module: it’s shorter, more flexible and convenient.&lt;/p&gt;

&lt;p&gt;You can use the top-level &lt;code class=&quot;highlighter-rouge&quot;&gt;Log&lt;/code&gt; constant to emit log entries, or you can declare one inside your module or class. This allows the entries to be emitted from a &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Each source will be configured to send the entries to different &lt;em&gt;backends&lt;/em&gt; depending on the severity level. If you initialize the logging with &lt;code class=&quot;highlighter-rouge&quot;&gt;Log.setup_from_env&lt;/code&gt; you will be able to filter the level and the sources using the &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_LOG_LEVEL&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_LOG_SOURCES&lt;/code&gt; environment variables.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# file app.cr&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;log&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup_from_env&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyApp&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
	&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;the app is running&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# log from myapp source&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;finished&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# log from the top-level source&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;If you want to log see all the log entries of the app above, you will need to set both environment variables, since their default values are &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_LOG_LEVEL=INFO&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_LOG_SOURCES=&quot;&quot;&lt;/code&gt; (only top-level).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ CRYSTAL_LOG_LEVEL=DEBUG CRYSTAL_LOG_SOURCES=&quot;*&quot; ./app
D, [2020-03-30T21:54:50.079554000Z #26206]   DEBUG -- app:my_app: the app is running
I, [2020-03-30T21:54:50.079624000Z #26206]    INFO -- app:: finished
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8847&quot;&gt;#8847&lt;/a&gt; and check &lt;a href=&quot;https://crystal-lang.org/api/0.34.0/Log.html&quot;&gt;the docs&lt;/a&gt; for how you can define your own backends and use more advanced features of this module.&lt;/p&gt;

&lt;h3 id=&quot;top-level-cleanup&quot;&gt;Top level cleanup&lt;/h3&gt;

&lt;p&gt;As we prepare for 1.0, we wanted to iterate and clean up some of the top-level of the std-lib and prelude. That is the reason behind many deprecations that involved part of &lt;code class=&quot;highlighter-rouge&quot;&gt;Colorize&lt;/code&gt; in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8892&quot;&gt;#8892&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Iconv&lt;/code&gt; in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8890&quot;&gt;#8890&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DL&lt;/code&gt; &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8882&quot;&gt;#8882&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some modules were moved out of the top-level: &lt;code class=&quot;highlighter-rouge&quot;&gt;Adler32&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CRC32&lt;/code&gt; are inside &lt;code class=&quot;highlighter-rouge&quot;&gt;Digest&lt;/code&gt; &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8881&quot;&gt;#8881&lt;/a&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;AtExitHandlers&lt;/code&gt; inside &lt;code class=&quot;highlighter-rouge&quot;&gt;Crystal&lt;/code&gt; &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8883&quot;&gt;#8883&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There might be some more cleanups/renames before 1.0 to avoid wanting some trivial early breaking-changes.&lt;/p&gt;

&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;/h3&gt;

&lt;p&gt;On the performance corner of this release, when using &lt;code class=&quot;highlighter-rouge&quot;&gt;Array#fill&lt;/code&gt; for writing all zero values, it will now use &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt; for the entire underlying buffer, instead of iterating every position. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8903&quot;&gt;#8903&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;serialization&quot;&gt;Serialization&lt;/h3&gt;

&lt;p&gt;There is a small breaking change in &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt; in order to align the API of all builders. &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML::Builder.new&lt;/code&gt; with block was renamed to &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML::Builder.build&lt;/code&gt; in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8896&quot;&gt;#8896&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When using the different format builders, &lt;code class=&quot;highlighter-rouge&quot;&gt;IO#flush&lt;/code&gt; will be called to ensure all the content will get through in case you are not closing properly the destination file. This applies to &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;INI&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt; builders. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8876&quot;&gt;#8876&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;time&quot;&gt;Time&lt;/h3&gt;

&lt;p&gt;It’s time for more breaking-changes in favor of less error-prone code. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Time::Span&lt;/code&gt; initialization API will use mandatory named arguments, like &lt;code class=&quot;highlighter-rouge&quot;&gt;Time::Span.new minutes: 2, seconds: 3&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8257&quot;&gt;#8257&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;files&quot;&gt;Files&lt;/h3&gt;

&lt;p&gt;When closing a &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Socket&lt;/code&gt; the internal &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; to force an invalid file descriptor and avoid mixing &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; from different &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt;s. In single-thread, this was never an issue, but on multi-thread, as usual, issues like this one can cause big headaches. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8873&quot;&gt;#8873&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Buffered#flush_on_newline&lt;/code&gt; is back. And its default value will be helpful for building CLI tools and pipe them into other commands. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8935&quot;&gt;#8935&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;http&quot;&gt;HTTP&lt;/h3&gt;

&lt;p&gt;The WebSocket support was lacking the proper handling of close code. In order to implement them, a breaking-change on the server-side and in client-side parts was needed. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8975&quot;&gt;#8975&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8981&quot;&gt;#8981&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;windows&quot;&gt;Windows&lt;/h3&gt;

&lt;p&gt;The windows support is moving forward while enabling more specs, and more contributors are jumping into the adventure. Check out &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8683&quot;&gt;#8683&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8822&quot;&gt;#8822&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8885&quot;&gt;#8885&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8958&quot;&gt;#8958&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal init&lt;/code&gt; tool got some polishing. The name of the shard is validated with respect &lt;a href=&quot;https://github.com/crystal-lang/shards/blob/master/SPEC.md#name&quot;&gt;shards spec&lt;/a&gt; and it can be inferred from the directory. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8737&quot;&gt;#8737&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal docs&lt;/code&gt; tool will now show warnings. In previous releases we switched to &lt;code class=&quot;highlighter-rouge&quot;&gt;:ditto:&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:nodoc:&lt;/code&gt; as magic comments. But we missed showing you the warnings in case you forget to add the colons. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8880&quot;&gt;#8880&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Please update your Crystal and report any issues. We will keep moving forward and start the development focusing on 0.35. There won’t be many more 0.x releases. We are getting super close to 1.0!.&lt;/p&gt;

&lt;p&gt;Again, we will be eagerly waiting for feedback from you on Shards to polish it before 1.0.&lt;/p&gt;

&lt;p&gt;All deprecation warnings will soon be gone, and there will be errors in the next release. We want a clean 1.0.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. It is extremely important for us to sustain the support through donations, so that we can maintain this development pace. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; and &lt;a href=&quot;https://salt.bountysource.com/teams/crystal-lang&quot;&gt;Bountysource&lt;/a&gt; are two available channels for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/04/06/crystal-0.34.0-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/04/06/crystal-0.34.0-released.html</guid>
      </item>
    
      <item>
        <title>Towards Crystal 1.0</title>
        <description>&lt;p&gt;Currently the main goal of the Crystal core team is to reach 1.0 in the near future. Since achieving that goal involves a number of non-obvious tradeoffs, we want to use this post to shed some light on those inherent tensions and how they drive our work and priorities for the next few releases.&lt;/p&gt;

&lt;p&gt;There are three main aspects of the Crystal ecosystem that in a way compete for resources and design decisions (when we say “Crystal ecosystem”, we mean: the compiler, the std-lib, official-ish and community shards, apps that depend on Crystal, and the community itself):&lt;/p&gt;

&lt;p&gt;The language is already widely used, so we want to minimize the number of breaking changes, and when we can’t avoid them, at least minimize their impact on existing codebases.
We want 1.0 to be a stable version of the language.
We want the language to keep evolving (said another way, we don’t want the fact that we reached 1.0 to mean that we’re left with an ossified language).&lt;/p&gt;

&lt;p&gt;The challenge at hand is to get as quickly as possible to a 1.0 version of Crystal that is at the same time as faithful as possible to the current state of the language, stable enough for individuals and organizations to feel comfortable adopting it for even their highest impact projects, and a solid foundation for future major versions.&lt;/p&gt;

&lt;p&gt;Considering this context, the most important question to answer almost continuously is: what should happen before 1.0 and what can wait? Let’s delve into that!&lt;/p&gt;

&lt;h2 id=&quot;what-can-wait---after-10&quot;&gt;What &lt;strong&gt;can&lt;/strong&gt; wait? - after 1.0&lt;/h2&gt;

&lt;p&gt;Since we created Crystal, the language kept evolving through a very free process of exploration of new ideas, sometimes experimental ones, that we hoped would bring joy and productivity to the programmer at the end of the day. Sometimes these ideas end up requiring changes in the language. We want to continue receiving and exploring these new ideas, because these organic processes are what made Crystal what it is.&lt;/p&gt;

&lt;p&gt;However, paying excessive attention to these kinds of novel ideas takes away precious resources and focus from the main goal of releasing 1.0. While approaching that, there will be less focus on new and enhanced features that require changes to the language.&lt;/p&gt;

&lt;p&gt;There are also important features that are strongly wanted, but they do not require changes in the language itself. These will likely keep receiving lots of attention from the community and we will do our best to review and give feedback to help them move forward. But we will mainly be focused on the features that are holding back 1.0.&lt;/p&gt;

&lt;p&gt;Let us go over some of those features, which might well make it into eventual 1.x versions of the language:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;: We aim for most of the shards and apps built on Crystal to be portable. The std-lib should hide platform specific aspects as well as possible. With that in mind adding more platforms to the supported list should not impact neither the language nor the public API. Again, recently we integrated a CI for Windows to ensure we continue moving steadily forward.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Debugger&lt;/strong&gt;: Improving the debugging capabilities requires changes to the compiler and tool ecosystem but not to the language. There is ongoing effort from the community and further collaboration is expected and welcome. The current efforts are looking amazing. These may or may not land in 1.0, it depends a lot on timing of testing and feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multi-threading&lt;/strong&gt;: There are pending stories to make multi-thread mode a non preview feature. To mention a few: which the desired guarantees for some parts of the std-lib are, or how the scheduler and runtime could be improved. We already polished &lt;code class=&quot;highlighter-rouge&quot;&gt;GC&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Channel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; to behave correctly with multi-threading on. Future potential enhancements may allow you to use multiple threads more freely, but the core aspects of the language and runtime are set and done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;X or Y compiler bug&lt;/strong&gt;: We will keep fixing them, before and after 1.0. Their existence didn’t prevent the existing community from building awesome stuff.&lt;/p&gt;

&lt;h2 id=&quot;what-cant-wait---before-10&quot;&gt;What &lt;strong&gt;can’t&lt;/strong&gt; wait? - before 1.0&lt;/h2&gt;

&lt;p&gt;So, what is missing to reach 1.0?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tooling&lt;/strong&gt;: There are a couple of stories regarding tooling that are missing and need improvements. Shards needs to be more solid for 1.0 (you might have noticed some work in the last couple of weeks on that).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;multi-thread stability &amp;amp; documentation&lt;/strong&gt;: With 0.33.0 we added some new features for multi-thread and improved IO handling. We want and need thread-safe IO, Channel and runtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;std-lib polishing&lt;/strong&gt;: Although the std-lib will keep evolving we know there are a couple of modules that do need at least a couple of iterations. We want to improve the current API before 1.0 so we allow more solid solutions to be built upon these features. Some examples of these modules include logging, Errno and general exceptions type hierarchy, as well as removing clutter from the top-level namespace.&lt;/p&gt;

&lt;p&gt;These areas are the ones Manas &amp;amp; the rest of the core-team will invest most of their effort until 1.0 is reached.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;With this post, we want to provide some clarity on what to expect and what not to expect from the Crystal core team for the next few months.&lt;/p&gt;

&lt;p&gt;Of course, other areas that are not mentioned can still receive contributions. But we want to be transparent on the need to aim for fewer, smaller and self-contained changes in the API to include them in 1.0. Said another way, we’ll be much more conservative as regards our merge policy until we get to 1.0.&lt;/p&gt;

&lt;p&gt;We already have many plans for after 1.0 that we’ll be excited to start sharing and investing efforts on after celebrating Crystal 1.0. Let’s get there first!&lt;/p&gt;

</description>
        <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/03/03/towards-crystal-1.0.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/03/03/towards-crystal-1.0.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.33.0 released!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.33.0&quot;&gt;Crystal 0.33.0&lt;/a&gt; has been released!&lt;/p&gt;

&lt;p&gt;This release comes with bug fixes, stability of the std-lib &amp;amp; runtime, some awaited language features and lots of cleanup.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.32.1...0.33.0&quot;&gt;117 commits since 0.32.1&lt;/a&gt; by 29 contributors.&lt;/p&gt;

&lt;p&gt;Let’s review some highlights in this release. But don’t miss out on the rest of the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.33.0&quot;&gt;release changelog&lt;/a&gt; which has a lot of valuable information.&lt;/p&gt;

&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;

&lt;p&gt;The new &lt;code class=&quot;highlighter-rouge&quot;&gt;select/timeout&lt;/code&gt; language construct allows you to perform a blocking channel operation but timeout after a specific amount of time. It was previously possible to do manually, but it required some boilerplate and a dedicated fiber. This is now possible while taking advantage of libevent directly.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;got &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;timeout&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timeout&lt;/code&gt; is not a top-level method and is expected to be used only in a blocking &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; condition (ie: without an &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;). Read more about &lt;code class=&quot;highlighter-rouge&quot;&gt;timeout&lt;/code&gt; in select statements in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8506&quot;&gt;#8506&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;macros&quot;&gt;Macros&lt;/h3&gt;

&lt;p&gt;In the built-in macros the &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeNode#name&lt;/code&gt; got extended with a new overload that allows you to pick whether you want (or not) the generic arguments when getting the type’s name (default is to include them). Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8483&quot;&gt;#8483&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Bar::Baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Bar::Baz&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Foo(T)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;generic_args: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;compiler&quot;&gt;Compiler&lt;/h2&gt;

&lt;p&gt;There were some memory corruption bugs because we used &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;memcpy&lt;/code&gt; 32-bits primitives in 64-bits machines. They are now fixed in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8746&quot;&gt;#8746&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, the default &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_PATH&lt;/code&gt; gives precedence to &lt;code class=&quot;highlighter-rouge&quot;&gt;./lib&lt;/code&gt; over embedded std-lib so your shards can override some std-lib modules if needed. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8752&quot;&gt;#8752&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We did some clean-ups and completely dropped the support for previously deprecated comma separators in enums. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8657&quot;&gt;#8657&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;standard-library&quot;&gt;Standard library&lt;/h2&gt;

&lt;p&gt;We took the time to do some clean-ups regarding various previously deprecated methods and modules. Some of them deprecated almost over a year ago. &lt;code class=&quot;highlighter-rouge&quot;&gt;PartialComparable&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Crypto::Bcrypt::Password#==&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP::Server::Response#respond_with_error&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::PullParser::Kind#==&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol#==(JSON::PullParser::Kind)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::Token#type&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;String#at&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Time.new&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Time.now&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Time.utc_now&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;URI.escape&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;URI.unescape&lt;/code&gt; are really no longer available. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8646&quot;&gt;#8646&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8596&quot;&gt;#8596&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are also some additions. &lt;code class=&quot;highlighter-rouge&quot;&gt;Object#in?(collection)&lt;/code&gt; is analogous to &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#includes?(obj)&lt;/code&gt; but with the receiver and argument swapped.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4242&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8720&quot;&gt;#8720&lt;/a&gt; and check many of the usages in the current std-lib at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8723&quot;&gt;#8723&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;serialization&quot;&gt;Serialization&lt;/h3&gt;

&lt;p&gt;The JSON deserialization improved to work better with some union types in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8689&quot;&gt;#8689&lt;/a&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::PullParser&lt;/code&gt; deals properly with overflows in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8698&quot;&gt;#8698&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;dig?&lt;/code&gt; methods for &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::Any&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML::Any&lt;/code&gt; got fixed to avoid raising on non-structure values. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8745&quot;&gt;#8745&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;files&quot;&gt;Files&lt;/h3&gt;

&lt;p&gt;How File, User and Group interact with each other keeps evolving to find a sweet spot. &lt;code class=&quot;highlighter-rouge&quot;&gt;File::Info#owner&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;File::Info#group&lt;/code&gt; are deprecated in favor of &lt;code class=&quot;highlighter-rouge&quot;&gt;#owner_id&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;#group_id&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8007&quot;&gt;#8007&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;/h3&gt;

&lt;p&gt;The handling of &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; got more robust to deal with some race conditions in multi-thread and avoid using invalid file descriptors in libevent after fork. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8707&quot;&gt;#8707&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8733&quot;&gt;#8733&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OpenSSL::SSL::Socket&lt;/code&gt; was improved to deal with some misbehaving parties out in the wild.  Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8540&quot;&gt;#8540&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h3&gt;

&lt;p&gt;Sometimes in generic types, using &lt;code class=&quot;highlighter-rouge&quot;&gt;Nil&lt;/code&gt; might cause some glitches. Like in &lt;code class=&quot;highlighter-rouge&quot;&gt;Array(Nil)&lt;/code&gt;, how would you distinguish if &lt;code class=&quot;highlighter-rouge&quot;&gt;#[]?&lt;/code&gt; returns the stored &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; or the out-of-bounds value. Even though sometimes it is still useful to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Nil&lt;/code&gt; as a type argument like in &lt;code class=&quot;highlighter-rouge&quot;&gt;Channel(Nil)&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Future(Nil)&lt;/code&gt; should now be working without surprises. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8650&quot;&gt;#8650&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’ve been paying attention to sporadic failures on the CI multi-thread jobs. Sometimes the specs need to be iterated since they were written with a different single-thread mindset. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8592&quot;&gt;#8592&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8643&quot;&gt;#8643&lt;/a&gt;, and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8724&quot;&gt;#8724&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;runtime&quot;&gt;Runtime&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IO::FileDescriptor.from_stdio&lt;/code&gt; now returns an &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; with blocking mode depending on the type of the file descriptor used for STDIN, STDOUT and STDERR. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8787&quot;&gt;#8787&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some changes in the runtime should improve the error reporting and exception handling.
Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8728&quot;&gt;#8728&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8499&quot;&gt;#8499&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8743&quot;&gt;#8743&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another addition that will reduce some paper cuts is a new top-level exception handler reporting. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8735&quot;&gt;#8735&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8791&quot;&gt;#8791&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes &lt;code class=&quot;highlighter-rouge&quot;&gt;puts&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dprintf&lt;/code&gt; are used to print to STDOUT or STDERR. But the latter is not portable. &lt;code class=&quot;highlighter-rouge&quot;&gt;Crystal::System.print_error&lt;/code&gt; was extended to handle &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;-like format. So it should be used instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;dprintf&lt;/code&gt; usually. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8786&quot;&gt;#8786&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;spec&quot;&gt;Spec&lt;/h3&gt;

&lt;p&gt;Usually using specs the &lt;code class=&quot;highlighter-rouge&quot;&gt;Spec::DotFormatter&lt;/code&gt; shows… dots! The &lt;code class=&quot;highlighter-rouge&quot;&gt;Spec::JUnitFormatter&lt;/code&gt; is another option that is a good fit for richer reporting. It’s got improved with lots of information in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8599&quot;&gt;#8599&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a bonus point this reporting was integrated in our CircleCI jobs so we can get some concise reports of failures, slow test and other statistics in the test summary.  Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8617&quot;&gt;#8617&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;doc-generator&quot;&gt;Doc generator&lt;/h3&gt;

&lt;p&gt;We finally settled to use &lt;code class=&quot;highlighter-rouge&quot;&gt;:ditto:&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:nodoc:&lt;/code&gt; for the doc generator. So you should always put the &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; around those words when documenting your code. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/6362&quot;&gt;#6362&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;platforms&quot;&gt;Platforms&lt;/h2&gt;

&lt;p&gt;Regarding Windows support there was some movement. A Windows CI using GitHub Actions was added in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8676&quot;&gt;#8676&lt;/a&gt; to help us move forward and not backwards. The &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; module in prelude was enabled in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8661&quot;&gt;#8661&lt;/a&gt;. More specs got fixed to work in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8670&quot;&gt;#8670&lt;/a&gt;. And a helper script to identify working std-lib specs was added in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8664&quot;&gt;#8664&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Regarding Alpine we are now also running it in the CI in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/7420&quot;&gt;#7420&lt;/a&gt; and you might &lt;a href=&quot;/2020/02/02/alpine-based-docker-images.html&quot;&gt;have read&lt;/a&gt; about the Alpine Docker images we are now building since &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8708&quot;&gt;#8708&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We started to use &lt;code class=&quot;highlighter-rouge&quot;&gt;lld&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt; in Linux builds since it seems we were hitting some &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt; limitations. In case you experience them you might also want to move to &lt;code class=&quot;highlighter-rouge&quot;&gt;lld&lt;/code&gt;. If it is available the &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; will take care to use it. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8641&quot;&gt;#8641&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Please update your Crystal and report any issues. We will keep moving forward and start the development focusing on 0.34.&lt;/p&gt;

&lt;p&gt;It will also be helpful if your shards are tested against Crystal nightly releases. Either Docker or Snap are the current channels to get them easily. This will help reduce the friction of a release while checking if the ecosystem is in good shape.&lt;/p&gt;

&lt;p&gt;The upcoming 0.34 is likely to include an updated shards, so using nightly would help us to collect feedback from it.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. It is extremely important for us to sustain the support through donations, so that we can maintain this development pace. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; and &lt;a href=&quot;https://salt.bountysource.com/teams/crystal-lang&quot;&gt;Bountysource&lt;/a&gt; are two available channels for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/02/14/crystal-0.33.0-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/02/14/crystal-0.33.0-released.html</guid>
      </item>
    
  </channel>
</rss>
