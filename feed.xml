<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラミング言語 Crystal</title>
    <description>Ruby のような構文で型推論のあるコンパイル言語</description>
    <link>https://ja.crystal-lang.org</link>
    <atom:link href="https://ja.crystal-lang.org/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Crystal 0.35.1がリリースされました！</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.35.1&quot;&gt;Crystal 0.35.1&lt;/a&gt; がリリースされました。&lt;/p&gt;

&lt;p&gt;このリリースは0.35.0ほど刺激的なものではありません。もしこちらのアナウンスを見ていなければ、&lt;a href=&quot;/2020/06/09/crystal-0.35.0-released.html&quot;&gt;こちらをまず読んでください&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;このパッチリリースは最近の追加や2つのリグレッションの修正を反映させるものです。&lt;/p&gt;

&lt;p&gt;5人のコントリビュータによって&lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.35.0...0.35.1&quot;&gt;0.35.0から13のコミットが&lt;/a&gt;ありました。&lt;/p&gt;

&lt;p&gt;それでは今回のリリースのハイライトを紹介していきます。ですが、&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.35.1&quot;&gt;リリースのチェンジログ&lt;/a&gt;にもたくさんの価値ある情報があることを忘れないでください。&lt;/p&gt;

&lt;h2 id=&quot;標準ライブラリ&quot;&gt;標準ライブラリ&lt;/h2&gt;

&lt;p&gt;0.35.0で導入された&lt;code class=&quot;highlighter-rouge&quot;&gt;IO#write&lt;/code&gt;の変更が取り消されることになりました。以前のように&lt;code class=&quot;highlighter-rouge&quot;&gt;Nil&lt;/code&gt;を返すことになります。この意図的な変更は想定以上に破壊的でした。振り回してしまったことをお詫びします。&lt;/p&gt;

&lt;p&gt;このため、0.35.0向けにアップデートした shard については、0.35.0と十分に比較する必要があります。0.35.0 向けにアップデートしていない shard はとくに追加で何かすることはありません。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9469&quot;&gt;#9469&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;OpenSSL クライアントのコンテキストは利便性のため、デフォルトでやや厳格でない暗号も設定されるようになりました。サーバーのコンテキストはよりセキュアなものになっています。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9459&quot;&gt;#9459&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;h2 id=&quot;次のステップ&quot;&gt;次のステップ&lt;/h2&gt;

&lt;p&gt;Crystal をアップデートしてください。そして、問題の報告を心待ちにしています。私たちは1.0.0に向けての開発を始めています。1.0.0-preX のようなリリースをして、最終的な調整を重ねていくでしょう。&lt;/p&gt;

&lt;p&gt;すべての非推奨にした定義は1.0では削除される予定です。1.0をクリーンなバージョンにしたいと思っています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;、&lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt;、そして大勢の&lt;a href=&quot;/sponsors&quot;&gt;スポンサー&lt;/a&gt;の継続的なサポートにたくさんの感謝をします。継続的に開発・メンテナンスを続けていくには、寄付が不可欠です。&lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; で受け付けています。Crystal の直接のスポンサーになりたい場合や、他のサポート方法を見つけた場合は、&lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; に連絡してください。それでは、ここまで読んでいただきありがとうございます！&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/06/19/crystal-0.35.1-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/06/19/crystal-0.35.1-released.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.35.0がリリースされました！</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.35.0&quot;&gt;Crystal 0.35.0&lt;/a&gt; がリリースされました。&lt;/p&gt;

&lt;p&gt;今回のリリースはみなさんの待ち望んでいた、1.0直前の標準ライブラリに磨きをかけるものです。この中には最近のいくつかの追加やより洗練された実装の繰り返しといった、多くの活動があります。他には、デバッグの改善や Windows のサポート、その他のプラットフォームでのランタイムの安定化などを含みます。&lt;/p&gt;

&lt;p&gt;このリリースが最後のバージョン 0.x のリリースになるでしょう。1.0.0-preX のリリースに向けて準備をしていてください。&lt;/p&gt;

&lt;p&gt;38人のコントリビューターによって&lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.34.0...0.35.0&quot;&gt;0.34.0から242のコミット&lt;/a&gt;がありました。&lt;/p&gt;

&lt;p&gt;それでは今回のリリースのハイライトを紹介していきます。たくさんの紹介するものがあります。ですが、&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.35.0&quot;&gt;リリースのチェンジログ&lt;/a&gt;にもたくさんの価値ある情報があることを忘れないでください。&lt;/p&gt;

&lt;h2 id=&quot;言語の変更&quot;&gt;言語の変更&lt;/h2&gt;

&lt;h3 id=&quot;網羅性チェック-テイク2&quot;&gt;網羅性チェック (テイク2)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/2020/04/06/crystal-0.34.0-released.html#exhaustive-case&quot;&gt;前回のリリース&lt;/a&gt;で、コンパイラは case 文の条件節の網羅性チェックをするようになりました。ですが、フィーバックを受けて、次のことを決定しました。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;case ... when&lt;/code&gt; を前のように戻す。暗黙の &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt; があって、条件節は網羅的でなくてもよい。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;case ... in&lt;/code&gt; 文を実験的に導入する。こちらは暗黙の &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; を持たず、条件の網羅性が確認できなければコンパイルが通らない。実験的というのはフォードバックを元に変更される可能性がある、ということです。たとえマイナーリリースの間でも、その変更は行なわれる可能性があります。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この決定によって &lt;code class=&quot;highlighter-rouge&quot;&gt;case ...  when&lt;/code&gt; の意味は身近なままとなり、既存のコードに影響することなく網羅性チェックをする case 文を洗練させていくことが可能になります。より詳細な議論は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9258&quot;&gt;#9258&lt;/a&gt;と&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9045&quot;&gt;#9045&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Compiles! Totally fine&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Error: missing case String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;この変更によって &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; が正式なキーワードとなりました。これは破壊的な変更ですが、&lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; はこれまでもマクロ中ではキーワードとして扱われていました。&lt;/p&gt;

&lt;h2 id=&quot;コンパイラ&quot;&gt;コンパイラ&lt;/h2&gt;

&lt;p&gt;コンパイラに破壊的な変更があり、コンパイラの CLI がシバン &lt;code class=&quot;highlighter-rouge&quot;&gt;#!&lt;/code&gt; によるスクリプトをより安心して動作させられるようになりました。これからは、コマンドの代わりにファイルを引数にしてコンパイラを実行すると (&lt;code class=&quot;highlighter-rouge&quot;&gt;crystal path/to/file.cr arg1 arg2&lt;/code&gt; のように)、ファイルがコンパイルされて、そしてそれを実行する、という動作をします。このとき、引数はプログラムにだけ影響して、コンパイラに影響しない、ということです。&lt;/p&gt;

&lt;p&gt;コンパイラフラグを使いたい場合や引数と共にプログラムを実行したい場合は、次のように run コマンドが使えます。&lt;code class=&quot;highlighter-rouge&quot;&gt;crystal run path/to/file.cr -Dcompiler_flag --release -- arg1 arg2&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; はコンパイラのオプションとプログラムのオプションを切り分けます。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9171&quot;&gt;#9171&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;他の破壊的な変更としては、&lt;code class=&quot;highlighter-rouge&quot;&gt;crystal env&lt;/code&gt; がシェル向けにクオートをするようになりました。つまり、&lt;code class=&quot;highlighter-rouge&quot;&gt;eval &quot;$(crystal env)&quot;&lt;/code&gt; が安全にできるようになったということです。また、&lt;code class=&quot;highlighter-rouge&quot;&gt;crystal env VARIABLE&lt;/code&gt; はこれまでの通りです。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9428&quot;&gt;#9428&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;パーサーはたくさんの愛を受けました。エッジケースの修正や、そこそこのリファクタリングが&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9208&quot;&gt;#9208&lt;/a&gt;でされています。&lt;/p&gt;

&lt;p&gt;言語のいくつかの機能はより良い動作のために反芻が必要でした。このリリースではオートキャストが多重ディスパッチやユニオンのデフォルト値に対して動作するようになりました。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9004&quot;&gt;#9004&lt;/a&gt;と&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9366&quot;&gt;#9366&lt;/a&gt;を確認してください。これはいくつかの場合の予期しない残念な挙動を解決するでしょう。&lt;/p&gt;

&lt;p&gt;既存の機能の改善の背景には、Crystal のデバッグ機能の改善を待ち望まれていたことがあります。この改善はまだ完了してはいませんが、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8538&quot;&gt;#8538&lt;/a&gt;で大きな一歩を踏み出すことができました。この &lt;a href=&quot;https://dev.to/bcardiff/debug-crystal-in-vscode-via-codelldb-3lf&quot;&gt;VSCode で Crystal のプログラムをどうやってデバッグするかを説明した記事&lt;/a&gt;で、どう設定すれば良いかや、スクリーンショットを確認できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@[Link]&lt;/code&gt; アノテーションは少しだけ再デザインされました。pkg-config とより統合されて、&lt;code class=&quot;highlighter-rouge&quot;&gt;static:&lt;/code&gt; オプションのサポートが無くなりました。これによって将来、デフォルト値をいい感じに提供しつつ、リンクを詳細に設定できるようにすることを見据えています。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8972&quot;&gt;#8972&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crystal パッケージのメンテナにとって&lt;/strong&gt;、コンパイラをビルドする際に&lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_CONFIG_PATH&lt;/code&gt; が標準ライブラリのパスのみを必要とするようになったという知らせは価値があるでしょう。&lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt; ディレクトリはコンパイラによって常に含まれるようになりました。将来的には shaeds のインストールパスを細かく設定できるようにしたいと考えています。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9315&quot;&gt;#9315&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;その他の変更として、&lt;code class=&quot;highlighter-rouge&quot;&gt;SOURCE_DATE_EPOCH&lt;/code&gt; という環境変数を使うことでコンパイラをビルドする際にソースコードの時刻を伝えることができるようになりました。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9088&quot;&gt;#9088&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;h2 id=&quot;shards&quot;&gt;Shards&lt;/h2&gt;

&lt;p&gt;Shards v0.11.1 が今回のリリースではバンドルされます。&lt;/p&gt;

&lt;p&gt;今回の把握すべき主要な変更は &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal:&lt;/code&gt; プロパティが&lt;strong&gt;効果的に機能する&lt;/strong&gt;ようになった点です。このプロパティは、有効な shard のバージョンを Crystal 環境に基いて決定するのに使われます。詳細は動作は &lt;a href=&quot;https://github.com/crystal-lang/shards/blob/v0.11.1/SPEC.md#crystal&quot;&gt;shards/SPEC.md&lt;/a&gt; を確認してください。&lt;/p&gt;

&lt;p&gt;後方互換性のために &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal:&lt;/code&gt; プロパティが &lt;code class=&quot;highlighter-rouge&quot;&gt;shard.yml&lt;/code&gt; に無かった場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt; 1.0.0&lt;/code&gt;として解釈されます。よって、Crystal 1.0.0 まではそのままでも動作し続けるでしょう。また、この挙動が不便な場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-crystal-version&lt;/code&gt; を渡すことでこのチェックを無視できます。&lt;/p&gt;

&lt;p&gt;利用者の期待を高めるには、依存するバージョンを明示する必要があると考えられます。そして、標準ライブラリや言語のバージョンもまた依存関係なのです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;crystal:&lt;/code&gt; プロパティの動作は依存関係のバージョン指定とほとんど同じように動作します。違いは、利便性のため &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal: x.y.z&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;~&amp;gt; x.y, &amp;gt;= x.y.z&lt;/code&gt; のように (つまり、 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;= x.y.z, &amp;lt; (x+1).0.0&lt;/code&gt;) 解釈されることです。この結果、任意の&lt;strong&gt;メジャー&lt;/strong&gt;リリースで何らかの対応が必要になります。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shards install&lt;/code&gt; を現在のプロジェクトで実行することを推奨します。これによって、&lt;code class=&quot;highlighter-rouge&quot;&gt;shard.lock&lt;/code&gt; がいくつかの追加の新しいバージョンのフォーマットを持つことに気付くかもしれません。そして、&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/.shards.info&lt;/code&gt; ファイルがインストールした依存関係を説明するものとして追加されています。この新しいファイルはバージョン管理システムでトラックする必要はありません。&lt;/p&gt;

&lt;p&gt;最後に、依存関係のバージョン指定で &lt;code class=&quot;highlighter-rouge&quot;&gt;version: &amp;gt;= 1.0.0, &amp;lt; 2.0&lt;/code&gt; のように複数の指定を交差させられるようになったことを紹介します。&lt;/p&gt;

&lt;p&gt;このバージョンでの shards の完全な変更のリストは&lt;a href=&quot;https://github.com/crystal-lang/shards/releases/tag/v0.11.0&quot;&gt;チェンジログ&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;h2 id=&quot;標準ライブラリ&quot;&gt;標準ライブラリ&lt;/h2&gt;

&lt;p&gt;このリリースにはいくつもの破壊的変更が含まれます。それらの大半は普通、非推奨の警告が出るようになっています。標準ライブラリの整理なしに1.0へと進むことはないつもりです。このような整理は以前にもあったはずです。これに優先順位を付けることは簡単ではなく、地道に進めています。&lt;/p&gt;

&lt;p&gt;計算結果の出力や入力に &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; を引数に取る多くのメソッドがあります。&lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/5916&quot;&gt;#5916&lt;/a&gt; で、このような引数を最初の引数にすることを標準化する提案がありました。これは &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9134&quot;&gt;#9134&lt;/a&gt; といくつかのそれに続く PR で実現されました。&lt;/p&gt;

&lt;p&gt;これらのすべての &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; メソッドに関係して、&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; クラスのメソッドで、&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; の値を返すものについて、値を返すのではなく結果を &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; に書き込むようなオーバロードが追加されました。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9236&quot;&gt;#9236&lt;/a&gt;を確認してください。この影響を受けるのは &lt;code class=&quot;highlighter-rouge&quot;&gt;#underscore&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#titleize&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#capitalize&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#upcase&lt;/code&gt;、そして&lt;code class=&quot;highlighter-rouge&quot;&gt;#downcase&lt;/code&gt; といったメソッドです。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;文字列のインターポレーションの際に生成された文字列が直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; に渡されるようにするための改善の提案として、&lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/9291&quot;&gt;#9291&lt;/a&gt;に目を通しておくといいでしょう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;その他の &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; の破壊的な変更としては、&lt;code class=&quot;highlighter-rouge&quot;&gt;#skip&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#write&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#write_utf8&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#write_byte&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;#write_bytes&lt;/code&gt;、や&lt;code class=&quot;highlighter-rouge&quot;&gt;#skip_to_end&lt;/code&gt; がスキップした/書き込んだバイト数の数値を返すようになったことがあります。これは他の言語でもそのようになっており、書き込み中に追加の呼び出しなく現在のストリームを位置を把握できるようになります。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9233&quot;&gt;#9233&lt;/a&gt;と&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9363&quot;&gt;#9363&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@[Experimental]&lt;/code&gt; アノテーションという、ライブラリや言語、shardの部分に細心の注意と共に使う必要のあるという指定をするためのものが導入されました。実験的な (experimental) 機能は変更や破壊、もしくは削除を Semver の規約に関わらず行なっても良いものとします。今のところ、アノテーションはドキュメントジェネレータで利用されています。ですが、他にも追加の機能のアイディアがあります。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9244&quot;&gt;#9244&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Digest&lt;/code&gt; 型がリファクタリングされて、いくつかのメソッドの名前が変更されたことに注意する必要があるかもしれません。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8426&quot;&gt;#8426&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;さて、&lt;code class=&quot;highlighter-rouge&quot;&gt;OptionParser&lt;/code&gt; がサブコマンドを定義できるようになりました。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9009&quot;&gt;#9009&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;その他に整理したものとしては&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8886&quot;&gt;#8886&lt;/a&gt;で、&lt;code class=&quot;highlighter-rouge&quot;&gt;Flate&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Gzip&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Zip&lt;/code&gt;、そして&lt;code class=&quot;highlighter-rouge&quot;&gt;Zlib&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;Compress&lt;/code&gt; モジュールに移動されました。また、&lt;code class=&quot;highlighter-rouge&quot;&gt;Flate&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;Compress::Deflate&lt;/code&gt; に名前が変更されています。&lt;code class=&quot;highlighter-rouge&quot;&gt;require &quot;compress/gzip&quot;&lt;/code&gt; として、これらの定数を変更する必要があります。&lt;code class=&quot;highlighter-rouge&quot;&gt;require &quot;gzip&quot;&lt;/code&gt; は依然として有効ですが、警告メッセージが表示されることになります。&lt;/p&gt;

&lt;p&gt;いくつかの変更が &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;FileUtils&lt;/code&gt; にあります。これらは整理されて、強制する操作が両方の API で有効になりました。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9175&quot;&gt;#9175&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;h3 id=&quot;マクロ&quot;&gt;マクロ&lt;/h3&gt;

&lt;p&gt;クロスコンパイルの際、&lt;code class=&quot;highlighter-rouge&quot;&gt;host_flag?&lt;/code&gt; というマクロが追加されたことを知っておくと便利でしょう。これは &lt;code class=&quot;highlighter-rouge&quot;&gt;flag?&lt;/code&gt; のようなものですが、ホストのマシンで解決されます。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9049&quot;&gt;#9049&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;h3 id=&quot;数値計算&quot;&gt;数値計算&lt;/h3&gt;

&lt;p&gt;符号付きと符号無しの数値の混ざった演算のオーバーフローの検出が修正されました。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9403&quot;&gt;#9403&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Int#digits&lt;/code&gt; というメソッドが追加されて、一貫性のため &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInt#digits&lt;/code&gt; の出力が反転されました。詳細は &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9383&quot;&gt;#9383&lt;/a&gt; を確認してください。&lt;/p&gt;

&lt;h3 id=&quot;シリアライズ&quot;&gt;シリアライズ&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.mapping&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML.mapping&lt;/code&gt; を使っている場合は、&lt;a href=&quot;https://github.com/crystal-lang/json_mapping.cr&quot;&gt;github:crystal-lang/json_mapping.cr&lt;/a&gt; と &lt;a href=&quot;https://github.com/crystal-lang/yaml_mapping.cr&quot;&gt;github:crystal-lang/yaml_mapping.cr&lt;/a&gt; に移行してください。これらの機能は十分なものでしたが、現在は &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::Serializable&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML::Serializable&lt;/code&gt; がより良いものとしてあるため、標準ライブラリから削除されました。詳細は &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9272&quot;&gt;#9272&lt;/a&gt; を確認してください。&lt;/p&gt;

&lt;h3 id=&quot;時刻&quot;&gt;時刻&lt;/h3&gt;

&lt;p&gt;これからは &lt;code class=&quot;highlighter-rouge&quot;&gt;Time#to_rfc3339&lt;/code&gt; のデフォルトの精度は秒となり、それ以上の精度は出力されません。より細かな精度が必要な場合は &lt;code class=&quot;highlighter-rouge&quot;&gt;fraction_digits&lt;/code&gt; という名前付き引数に 0. 3, 6, 9 という精度の桁数を指定してください。&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9283&quot;&gt;#9283&lt;/a&gt; で、時刻に応じて小数点以下の秒を表示する機能を削除しています。&lt;/p&gt;

&lt;h3 id=&quot;ネットワーク&quot;&gt;ネットワーク&lt;/h3&gt;

&lt;p&gt;SSL サーバーのデフォルト値を&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9026&quot;&gt;#9026&lt;/a&gt;で更新しました。また、&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP::Server&lt;/code&gt; が SSL ハンドシェイク中に時折失敗する問題を&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9177&quot;&gt;#9177&lt;/a&gt;で修正しました。&lt;/p&gt;

&lt;p&gt;そして、&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP::Server&lt;/code&gt;に2つの破壊的な変更があります。エラーハンドリングとログまわりの処理を&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9115&quot;&gt;#9115&lt;/a&gt;で改善し、新しいログモジュールと統合しました。&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9210&quot;&gt;#9210&lt;/a&gt;で、&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP::Request#remote_address&lt;/code&gt; の型を &lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::Address?&lt;/code&gt; に変更しました。&lt;/p&gt;

&lt;h3 id=&quot;ログ&quot;&gt;ログ&lt;/h3&gt;

&lt;p&gt;まず初めに、&lt;a href=&quot;/2020/04/06/crystal-0.34.0-released.html&quot;&gt;0.34.0&lt;/a&gt;で導入した新しいログモジールを早期に試してフィードバックを送ってくださった皆様に感謝いたします。破壊的な変更を含むいくつかの変更点がありますが、それらは主要な API には影響しません。これらを組み合わせることで、追加の機能といくつかのユースケースでのパーフォマンスの改善を達成しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9293&quot;&gt;#9293&lt;/a&gt;で &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Severity::Warning&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;Warn&lt;/code&gt; へと名前を変更しました。&lt;code class=&quot;highlighter-rouge&quot;&gt;Log.warn { ... }&lt;/code&gt; がありましたが、これはそのままで、警告を表します。。この変更は &lt;code class=&quot;highlighter-rouge&quot;&gt;:warning&lt;/code&gt; やほとんどの環境変数経由での設定に影響します。同様に &lt;code class=&quot;highlighter-rouge&quot;&gt;Verbose&lt;/code&gt; を削除して、&lt;code class=&quot;highlighter-rouge&quot;&gt;Trace&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;Notice&lt;/code&gt; を &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9107&quot;&gt;#9107&lt;/a&gt;で追加しました。&lt;/p&gt;

&lt;p&gt;ログのセットアップがよりシンプルになりました。&lt;code class=&quot;highlighter-rouge&quot;&gt;Log.setup*&lt;/code&gt; 系の2つのメソッドがあります。これらのメソッドは常にソースとバックエンドの間のバインディングを完全に設定するでしょう。&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:debug&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# will show debug or above in the stdout for all source&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;db.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:trace&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# will show trace or above in the stdout for db.* sources and nothing else&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup_from_env&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# will grab the value of LOG_LEVEL env variable&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Log.setup_from_env&lt;/code&gt; が1つの環境変数を受け取って動作するようになったことにも注意してください。より柔軟なものが今後追加されるかもしれませんが、名前付き引数はより良い体験を提供するはずです。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9145&quot;&gt;#9145&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;各エントリはこれまでより、現在実行しているファイバーから取得したコンテキストの情報を持っていました。その &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Context&lt;/code&gt; の責務を &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Metadata&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Metadata::Value&lt;/code&gt; に分割することにしました。前者は&lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; から &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Metadata::Value&lt;/code&gt; へのハッシュのようなデータ構造ですが、アロケーションやアルゴリズム的な最適化がされています。これらは主に&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9227&quot;&gt;#9227&lt;/a&gt;と&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9295&quot;&gt;#9295&lt;/a&gt;で実装されました。これらのリファクタリングによって、クローンによって獲得していた &lt;code class=&quot;highlighter-rouge&quot;&gt;Log::Metadata::Value&lt;/code&gt; の不変性 (immutability) が無くなりました。&lt;/p&gt;

&lt;p&gt;ログエントリにローカルのメタデータや構造化された情報を追加したいという機能が望まれていました。もちろん、現在のファイバのコンテキストに対する変更や復旧が最小であるものが望ましいです。エントリが出力されていない場合は値の生成を省略するという当初の設計を保って、これを達成しました。&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Program started&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Program started&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# same as previous&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;User logged in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# local data&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;User logged in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_that_computes_hash_named_tuple_or_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;exception: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Oh no!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# with exception&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;exception: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Oh no!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# with exception, no local data&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;exception: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Oh no!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# same as previous&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;action: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log_in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# empty message&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;カスタムのログフォーマッタを作る方法は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9211&quot;&gt;#9211&lt;/a&gt;で再検討されました。ブロックや Proc からフォーマッタを作る方法はまだ利用できますが、文字列から直接フォーマッタを定義するシンプルな方法を確認してみてください。&lt;/p&gt;

&lt;p&gt;出力するログのエントリーをテストしたい場合、新しく追加された &lt;code class=&quot;highlighter-rouge&quot;&gt;Log.capture&lt;/code&gt; というヘルパーが利用できます。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9201&quot;&gt;#9201&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;h3 id=&quot;並行処理&quot;&gt;並行処理&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Concurrent::Future&lt;/code&gt; とトップレベルの &lt;code class=&quot;highlighter-rouge&quot;&gt;delay&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;future&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;lazy&lt;/code&gt; を削除しました。これらを使い続けたい場合 &lt;a href=&quot;https://github.com/crystal-community/future.cr&quot;&gt;github:crystal-community/future.cr&lt;/a&gt; shard を利用してください。詳細は &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9093&quot;&gt;#9093&lt;/a&gt; を確認してください。&lt;/p&gt;

&lt;p&gt;その他に&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9097&quot;&gt;#9097&lt;/a&gt;で &lt;code class=&quot;highlighter-rouge&quot;&gt;parallel&lt;/code&gt; マクロが削除されました。&lt;/p&gt;

&lt;p&gt;1.0 以降に向けて、より堅牢で様々な利用に耐えうるもの開発したいと考えています。&lt;/p&gt;

&lt;h3 id=&quot;ランタイム&quot;&gt;ランタイム&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Process#signal&lt;/code&gt; があるので &lt;code class=&quot;highlighter-rouge&quot;&gt;Process#kill&lt;/code&gt; を非推奨としました。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9006&quot;&gt;#9006&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;また &lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt; も非推奨となりました。これはマルチスレッド環境では有効ではありません。この変更が問題である場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;Process.fork&lt;/code&gt; はまだ利用できるのでそちらを使ってください。しかし、このメソッドはもはや公開された API ではありません。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9136&quot;&gt;#9136&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;h3 id=&quot;プラットフォーム&quot;&gt;プラットフォーム&lt;/h3&gt;

&lt;p&gt;macOS ユーザーへ、10.15 (Catalina) で起こるいくつかの互換性の問題を&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9296&quot;&gt;#9296&lt;/a&gt;で修正しました。&lt;/p&gt;

&lt;p&gt;BSD のユーザーヘ、DragonFly(BSD) のサポートを&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9178&quot;&gt;#9178&lt;/a&gt;で追加しました。&lt;/p&gt;

&lt;p&gt;musl ユーザーへ、奇妙な segfaults が&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9238&quot;&gt;#9238&lt;/a&gt;で、バックトレースが空になる問題が&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9267&quot;&gt;#9267&lt;/a&gt;で修正されました。&lt;/p&gt;

&lt;p&gt;Windows ユーザーへはたくさんのお知らせがあります。現在進行中の取り組みを見るには &lt;a href=&quot;https://github.com/crystal-lang/crystal/wiki/Porting-to-Windows&quot;&gt;Wiki ページ&lt;/a&gt;や&lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/5430&quot;&gt;#5430&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;p&gt;今回のリリースでの Windows 向けの変更としては次のようなものがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; の改善が&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9015&quot;&gt;#9015&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9038&quot;&gt;#9038&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9037&quot;&gt;#9037&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9257&quot;&gt;#9257&lt;/a&gt;で行なわれました。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; の振舞いが&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9207&quot;&gt;#9207&lt;/a&gt;でアラインメントされました。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Process&lt;/code&gt; が&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9047&quot;&gt;#9047&lt;/a&gt;と&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9021&quot;&gt;#9021&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9122&quot;&gt;#9122&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9112&quot;&gt;#9112&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9149&quot;&gt;#9149&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9310&quot;&gt;#9310&lt;/a&gt;で実装されました。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;crystal spec&lt;/code&gt; コマンドが Windows のパスで動作するように&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9234&quot;&gt;#9234&lt;/a&gt;で修正されました。&lt;/li&gt;
  &lt;li&gt;そして、コンパイラ自身を Windows 上でブートストラップできるようになりました。&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9054&quot;&gt;#9054&lt;/a&gt;、 &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9062&quot;&gt;#9062&lt;/a&gt;、 &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9095&quot;&gt;#9095&lt;/a&gt;、 &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9106&quot;&gt;#9106&lt;/a&gt;、 &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9307&quot;&gt;#9307&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ですが、まだ標準ライブラリのすべての部分が Windows で利用できるというというわけではないことには注意してください。&lt;/p&gt;

&lt;h3 id=&quot;ツール&quot;&gt;ツール&lt;/h3&gt;

&lt;p&gt;主要な変更はドキュメントジェネレータで、バージョンピッカーをサポートするようになりました。外部に &lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt; ファイルを用意して、現在と過去のリリースを指定することでバージョンピッカーに反映できます。詳細は&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8792&quot;&gt;#8792&lt;/a&gt;、&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9074&quot;&gt;#9074&lt;/a&gt;、それと&lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/9254&quot;&gt;#9254&lt;/a&gt;を確認してください。&lt;/p&gt;

&lt;h2 id=&quot;次のステップ&quot;&gt;次のステップ&lt;/h2&gt;

&lt;p&gt;Crystal をアップデートしてください。そして、問題の報告を心待ちにしています。私たちは1.0.0に向けての開発を始めています。1.0.0-preX のようなリリースをして、最終的な調整を重ねていくでしょう。&lt;/p&gt;

&lt;p&gt;ここ数回のリリースで修正が多かったことは認めます。ですが、不快感は最小になるように心掛けたつもりです。&lt;/p&gt;

&lt;p&gt;すべての非推奨にした定義は1.0では削除される予定です。1.0をクリーンなバージョンにしたいと思っています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;、&lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt;、そして大勢の&lt;a href=&quot;/sponsors&quot;&gt;スポンサー&lt;/a&gt;の継続的なサポートにたくさんの感謝をします。継続的に開発・メンテナンスを続けていくには、寄付が不可欠です。&lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; と &lt;a href=&quot;https://salt.bountysource.com/teams/crystal-lang&quot;&gt;Bountysource&lt;/a&gt; の2箇所で受け付けています。Crystal の直接のスポンサーになりたい場合や、他のサポート方法を探している場合は &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; に連絡してください。それでは、ここまで読んでいただきありがとうございます！&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/06/09/crystal-0.35.0-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/06/09/crystal-0.35.0-released.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.34.0 released!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.34.0&quot;&gt;Crystal 0.34.0&lt;/a&gt; has been released!&lt;/p&gt;

&lt;p&gt;Get excited because this release comes with some of the final touches to the language before 1.0: a better exception hierarchy to replace Errno, a new logging module, cleanups and fixes aiming for a better, more stable release, one that should make us all proud.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.33.0...0.34.0&quot;&gt;183 commits since 0.33.0&lt;/a&gt; by 26 contributors.&lt;/p&gt;

&lt;p&gt;Let’s get right into some of the highlights in this release. But don’t miss out on the rest of the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.34.0&quot;&gt;release changelog&lt;/a&gt; which has a lot of valuable information.&lt;/p&gt;

&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;

&lt;h3 id=&quot;exhaustive-case&quot;&gt;Exhaustive Case&lt;/h3&gt;

&lt;p&gt;From now on a &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; expression will no longer have an implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt;. This is useful to enable an exhaustive check across the &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; branches within the &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt;. If you are doing &lt;code class=&quot;highlighter-rouge&quot;&gt;case exp&lt;/code&gt; over a union or an enum value, and you are missing a &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; to cover some type or value, the compiler will let you know. Unless you have an &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; at the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: In this version, when the &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; does not cover all the possibilities, a warning is generated, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt; is implicitly added. In the next version it will produce a compile-time error and the implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt; will be gone.&lt;/p&gt;

&lt;p&gt;The following snippet complains about the missing &lt;code class=&quot;highlighter-rouge&quot;&gt;when Char&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'x'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;And the following snippet complains about the missing &lt;code class=&quot;highlighter-rouge&quot;&gt;when West&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Direction&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;North&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;South&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;East&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;West&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;North&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;north?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;south?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;east?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The only case that will still have an implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt; is when there is no expression and only a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; statements. This construction is equivalent to multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;elseif&lt;/code&gt; where there is an implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;else nil&lt;/code&gt; also.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;even?&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# if x.even?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# elsif y &amp;gt;= 0&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8424&quot;&gt;#8424&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;procs-subtyping&quot;&gt;Procs subtyping&lt;/h3&gt;

&lt;p&gt;While dealing with &lt;code class=&quot;highlighter-rouge&quot;&gt;Procs&lt;/code&gt; and callbacks it is common to not use the return value. In Crystal, that usually means returning &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. In regular methods you can specify the return type &lt;code class=&quot;highlighter-rouge&quot;&gt;: Nil&lt;/code&gt; to ignore the value of the last expression.&lt;/p&gt;

&lt;p&gt;The counterpart in &lt;code class=&quot;highlighter-rouge&quot;&gt;Procs&lt;/code&gt; is harder because there usually is no type annotation for the return type.&lt;/p&gt;

&lt;p&gt;For ease of use, we make it that any &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc(T)&lt;/code&gt; should be able to be used as a &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc(Nil)&lt;/code&gt;. That is, ignoring the return value in runtime. So, for those that like formality, &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc(T) &amp;lt; Proc(Nil)&lt;/code&gt; is a valid subtyping rule now.&lt;/p&gt;

&lt;p&gt;There was a previous attempt to achieve something similar, but in this version, a better handling of that affair was implemented. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8970&quot;&gt;#8970&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;compiler&quot;&gt;Compiler&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;disable_overflow&lt;/code&gt; compiler flag is dropped. This means that the usual arithmetic operators will always have the overflow check. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;+&lt;/code&gt; and others to skip overflow checks. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8772&quot;&gt;#8772&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_OPTS&lt;/code&gt; environment variable can now be used to inject compiler options and flags implicitly. This is useful, for example, when the compiler is used in &lt;code class=&quot;highlighter-rouge&quot;&gt;post_install&lt;/code&gt; steps of shards and you want to enforce &lt;code class=&quot;highlighter-rouge&quot;&gt;--error-on-warnings&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8900&quot;&gt;#8900&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;LLVM 10 has just been released and we added support for it. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8940&quot;&gt;#8940&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The codegen for Windows has been improved to work without &lt;code class=&quot;highlighter-rouge&quot;&gt;--single-module&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8978&quot;&gt;#8978&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;shards&quot;&gt;Shards&lt;/h2&gt;

&lt;p&gt;A new version of Shards (0.10.0) has been released. Until now you probably have been using Shards 0.8.1 which lacks some features. Shards 0.9.0 polished many use cases, but it uses a SAT solver, which doesn’t scale. For Shards 0.10.0 we created &lt;a href=&quot;https://github.com/crystal-lang/crystal-molinillo&quot;&gt;crystal-molinillo&lt;/a&gt; a port of the dependency resolution algorithm used by &lt;a href=&quot;https://bundler.io/&quot;&gt;Bundler&lt;/a&gt; and &lt;a href=&quot;https://cocoapods.org/&quot;&gt;CocoaPods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can read the rest of the updates in the &lt;a href=&quot;https://github.com/crystal-lang/shards/releases/tag/v0.10.0&quot;&gt;release changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will be eagerly waiting for feedback from you on Shards to polish it before 1.0.&lt;/p&gt;

&lt;h2 id=&quot;standard-library&quot;&gt;Standard library&lt;/h2&gt;

&lt;h3 id=&quot;errno-no-more&quot;&gt;Errno no more&lt;/h3&gt;

&lt;p&gt;Having as much as possible portable code is part of the goal of the std-lib. One of the areas that were in need of polishing was how &lt;code class=&quot;highlighter-rouge&quot;&gt;Errno&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;WinError&lt;/code&gt; were handled. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Errno&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;WinError&lt;/code&gt; exceptions are now gone, and were replaced by a new hierarchy of exceptions. Unfortunately, there is no easy way to make a smooth transition here with deprecation warnings. The &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Timeout&lt;/code&gt; exception was renamed to &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::TimeoutError&lt;/code&gt; to match the new hierarchy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeError&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Error&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IO::TimeoutError&lt;/code&gt; (inherits &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Error&lt;/code&gt;)&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File::Error&lt;/code&gt; (inherits &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Error&lt;/code&gt;)
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File::NotFoundError&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File::AccessDeniedError&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File::AlreadyExistsError&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::Error&lt;/code&gt; (inherits &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Error&lt;/code&gt;)
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::ConnectError&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::BindError&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, you can now use these new types to catch specific errors instead of checking &lt;code class=&quot;highlighter-rouge&quot;&gt;Errno&lt;/code&gt; values. We included the most used errors as classes. If there is no specific class, the base &lt;code class=&quot;highlighter-rouge&quot;&gt;File::Error&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Socket::Error&lt;/code&gt; will be raised with a meaningful description.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Errno&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;WinError&lt;/code&gt; underlying value is still present if you need it, via the &lt;code class=&quot;highlighter-rouge&quot;&gt;SystemError&lt;/code&gt; module included in this new hierarchy. But it is better if you avoid using it.&lt;/p&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8885&quot;&gt;#8885&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;log&quot;&gt;Log&lt;/h3&gt;

&lt;p&gt;The former &lt;code class=&quot;highlighter-rouge&quot;&gt;Logger&lt;/code&gt; module is deprecated and will be removed soon. Its replacement is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Log&lt;/code&gt; module: it’s shorter, more flexible and convenient.&lt;/p&gt;

&lt;p&gt;You can use the top-level &lt;code class=&quot;highlighter-rouge&quot;&gt;Log&lt;/code&gt; constant to emit log entries, or you can declare one inside your module or class. This allows the entries to be emitted from a &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Each source will be configured to send the entries to different &lt;em&gt;backends&lt;/em&gt; depending on the severity level. If you initialize the logging with &lt;code class=&quot;highlighter-rouge&quot;&gt;Log.setup_from_env&lt;/code&gt; you will be able to filter the level and the sources using the &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_LOG_LEVEL&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_LOG_SOURCES&lt;/code&gt; environment variables.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# file app.cr&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;log&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup_from_env&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyApp&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
	&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;the app is running&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# log from myapp source&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;finished&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# log from the top-level source&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;If you want to log see all the log entries of the app above, you will need to set both environment variables, since their default values are &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_LOG_LEVEL=INFO&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_LOG_SOURCES=&quot;&quot;&lt;/code&gt; (only top-level).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ CRYSTAL_LOG_LEVEL=DEBUG CRYSTAL_LOG_SOURCES=&quot;*&quot; ./app
D, [2020-03-30T21:54:50.079554000Z #26206]   DEBUG -- app:my_app: the app is running
I, [2020-03-30T21:54:50.079624000Z #26206]    INFO -- app:: finished
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8847&quot;&gt;#8847&lt;/a&gt; and check &lt;a href=&quot;https://crystal-lang.org/api/0.34.0/Log.html&quot;&gt;the docs&lt;/a&gt; for how you can define your own backends and use more advanced features of this module.&lt;/p&gt;

&lt;h3 id=&quot;top-level-cleanup&quot;&gt;Top level cleanup&lt;/h3&gt;

&lt;p&gt;As we prepare for 1.0, we wanted to iterate and clean up some of the top-level of the std-lib and prelude. That is the reason behind many deprecations that involved part of &lt;code class=&quot;highlighter-rouge&quot;&gt;Colorize&lt;/code&gt; in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8892&quot;&gt;#8892&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Iconv&lt;/code&gt; in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8890&quot;&gt;#8890&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DL&lt;/code&gt; &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8882&quot;&gt;#8882&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some modules were moved out of the top-level: &lt;code class=&quot;highlighter-rouge&quot;&gt;Adler32&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CRC32&lt;/code&gt; are inside &lt;code class=&quot;highlighter-rouge&quot;&gt;Digest&lt;/code&gt; &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8881&quot;&gt;#8881&lt;/a&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;AtExitHandlers&lt;/code&gt; inside &lt;code class=&quot;highlighter-rouge&quot;&gt;Crystal&lt;/code&gt; &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8883&quot;&gt;#8883&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There might be some more cleanups/renames before 1.0 to avoid wanting some trivial early breaking-changes.&lt;/p&gt;

&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;/h3&gt;

&lt;p&gt;On the performance corner of this release, when using &lt;code class=&quot;highlighter-rouge&quot;&gt;Array#fill&lt;/code&gt; for writing all zero values, it will now use &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt; for the entire underlying buffer, instead of iterating every position. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8903&quot;&gt;#8903&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;serialization&quot;&gt;Serialization&lt;/h3&gt;

&lt;p&gt;There is a small breaking change in &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt; in order to align the API of all builders. &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML::Builder.new&lt;/code&gt; with block was renamed to &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML::Builder.build&lt;/code&gt; in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8896&quot;&gt;#8896&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When using the different format builders, &lt;code class=&quot;highlighter-rouge&quot;&gt;IO#flush&lt;/code&gt; will be called to ensure all the content will get through in case you are not closing properly the destination file. This applies to &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;INI&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt; builders. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8876&quot;&gt;#8876&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;time&quot;&gt;Time&lt;/h3&gt;

&lt;p&gt;It’s time for more breaking-changes in favor of less error-prone code. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Time::Span&lt;/code&gt; initialization API will use mandatory named arguments, like &lt;code class=&quot;highlighter-rouge&quot;&gt;Time::Span.new minutes: 2, seconds: 3&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8257&quot;&gt;#8257&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;files&quot;&gt;Files&lt;/h3&gt;

&lt;p&gt;When closing a &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Socket&lt;/code&gt; the internal &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; to force an invalid file descriptor and avoid mixing &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; from different &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt;s. In single-thread, this was never an issue, but on multi-thread, as usual, issues like this one can cause big headaches. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8873&quot;&gt;#8873&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::Buffered#flush_on_newline&lt;/code&gt; is back. And its default value will be helpful for building CLI tools and pipe them into other commands. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8935&quot;&gt;#8935&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;http&quot;&gt;HTTP&lt;/h3&gt;

&lt;p&gt;The WebSocket support was lacking the proper handling of close code. In order to implement them, a breaking-change on the server-side and in client-side parts was needed. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8975&quot;&gt;#8975&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8981&quot;&gt;#8981&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;windows&quot;&gt;Windows&lt;/h3&gt;

&lt;p&gt;The windows support is moving forward while enabling more specs, and more contributors are jumping into the adventure. Check out &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8683&quot;&gt;#8683&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8822&quot;&gt;#8822&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8885&quot;&gt;#8885&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8958&quot;&gt;#8958&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal init&lt;/code&gt; tool got some polishing. The name of the shard is validated with respect &lt;a href=&quot;https://github.com/crystal-lang/shards/blob/master/SPEC.md#name&quot;&gt;shards spec&lt;/a&gt; and it can be inferred from the directory. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8737&quot;&gt;#8737&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal docs&lt;/code&gt; tool will now show warnings. In previous releases we switched to &lt;code class=&quot;highlighter-rouge&quot;&gt;:ditto:&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:nodoc:&lt;/code&gt; as magic comments. But we missed showing you the warnings in case you forget to add the colons. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8880&quot;&gt;#8880&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Please update your Crystal and report any issues. We will keep moving forward and start the development focusing on 0.35. There won’t be many more 0.x releases. We are getting super close to 1.0!.&lt;/p&gt;

&lt;p&gt;Again, we will be eagerly waiting for feedback from you on Shards to polish it before 1.0.&lt;/p&gt;

&lt;p&gt;All deprecation warnings will soon be gone, and there will be errors in the next release. We want a clean 1.0.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, &lt;a href=&quot;https://nikolamotor.com/&quot;&gt;Nikola Motor Company&lt;/a&gt; and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. It is extremely important for us to sustain the support through donations, so that we can maintain this development pace. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; and &lt;a href=&quot;https://salt.bountysource.com/teams/crystal-lang&quot;&gt;Bountysource&lt;/a&gt; are two available channels for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/04/06/crystal-0.34.0-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/04/06/crystal-0.34.0-released.html</guid>
      </item>
    
      <item>
        <title>Towards Crystal 1.0</title>
        <description>&lt;p&gt;Currently the main goal of the Crystal core team is to reach 1.0 in the near future. Since achieving that goal involves a number of non-obvious tradeoffs, we want to use this post to shed some light on those inherent tensions and how they drive our work and priorities for the next few releases.&lt;/p&gt;

&lt;p&gt;There are three main aspects of the Crystal ecosystem that in a way compete for resources and design decisions (when we say “Crystal ecosystem”, we mean: the compiler, the std-lib, official-ish and community shards, apps that depend on Crystal, and the community itself):&lt;/p&gt;

&lt;p&gt;The language is already widely used, so we want to minimize the number of breaking changes, and when we can’t avoid them, at least minimize their impact on existing codebases.
We want 1.0 to be a stable version of the language.
We want the language to keep evolving (said another way, we don’t want the fact that we reached 1.0 to mean that we’re left with an ossified language).&lt;/p&gt;

&lt;p&gt;The challenge at hand is to get as quickly as possible to a 1.0 version of Crystal that is at the same time as faithful as possible to the current state of the language, stable enough for individuals and organizations to feel comfortable adopting it for even their highest impact projects, and a solid foundation for future major versions.&lt;/p&gt;

&lt;p&gt;Considering this context, the most important question to answer almost continuously is: what should happen before 1.0 and what can wait? Let’s delve into that!&lt;/p&gt;

&lt;h2 id=&quot;what-can-wait---after-10&quot;&gt;What &lt;strong&gt;can&lt;/strong&gt; wait? - after 1.0&lt;/h2&gt;

&lt;p&gt;Since we created Crystal, the language kept evolving through a very free process of exploration of new ideas, sometimes experimental ones, that we hoped would bring joy and productivity to the programmer at the end of the day. Sometimes these ideas end up requiring changes in the language. We want to continue receiving and exploring these new ideas, because these organic processes are what made Crystal what it is.&lt;/p&gt;

&lt;p&gt;However, paying excessive attention to these kinds of novel ideas takes away precious resources and focus from the main goal of releasing 1.0. While approaching that, there will be less focus on new and enhanced features that require changes to the language.&lt;/p&gt;

&lt;p&gt;There are also important features that are strongly wanted, but they do not require changes in the language itself. These will likely keep receiving lots of attention from the community and we will do our best to review and give feedback to help them move forward. But we will mainly be focused on the features that are holding back 1.0.&lt;/p&gt;

&lt;p&gt;Let us go over some of those features, which might well make it into eventual 1.x versions of the language:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;: We aim for most of the shards and apps built on Crystal to be portable. The std-lib should hide platform specific aspects as well as possible. With that in mind adding more platforms to the supported list should not impact neither the language nor the public API. Again, recently we integrated a CI for Windows to ensure we continue moving steadily forward.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Debugger&lt;/strong&gt;: Improving the debugging capabilities requires changes to the compiler and tool ecosystem but not to the language. There is ongoing effort from the community and further collaboration is expected and welcome. The current efforts are looking amazing. These may or may not land in 1.0, it depends a lot on timing of testing and feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multi-threading&lt;/strong&gt;: There are pending stories to make multi-thread mode a non preview feature. To mention a few: which the desired guarantees for some parts of the std-lib are, or how the scheduler and runtime could be improved. We already polished &lt;code class=&quot;highlighter-rouge&quot;&gt;GC&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Channel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; to behave correctly with multi-threading on. Future potential enhancements may allow you to use multiple threads more freely, but the core aspects of the language and runtime are set and done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;X or Y compiler bug&lt;/strong&gt;: We will keep fixing them, before and after 1.0. Their existence didn’t prevent the existing community from building awesome stuff.&lt;/p&gt;

&lt;h2 id=&quot;what-cant-wait---before-10&quot;&gt;What &lt;strong&gt;can’t&lt;/strong&gt; wait? - before 1.0&lt;/h2&gt;

&lt;p&gt;So, what is missing to reach 1.0?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tooling&lt;/strong&gt;: There are a couple of stories regarding tooling that are missing and need improvements. Shards needs to be more solid for 1.0 (you might have noticed some work in the last couple of weeks on that).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;multi-thread stability &amp;amp; documentation&lt;/strong&gt;: With 0.33.0 we added some new features for multi-thread and improved IO handling. We want and need thread-safe IO, Channel and runtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;std-lib polishing&lt;/strong&gt;: Although the std-lib will keep evolving we know there are a couple of modules that do need at least a couple of iterations. We want to improve the current API before 1.0 so we allow more solid solutions to be built upon these features. Some examples of these modules include logging, Errno and general exceptions type hierarchy, as well as removing clutter from the top-level namespace.&lt;/p&gt;

&lt;p&gt;These areas are the ones Manas &amp;amp; the rest of the core-team will invest most of their effort until 1.0 is reached.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;With this post, we want to provide some clarity on what to expect and what not to expect from the Crystal core team for the next few months.&lt;/p&gt;

&lt;p&gt;Of course, other areas that are not mentioned can still receive contributions. But we want to be transparent on the need to aim for fewer, smaller and self-contained changes in the API to include them in 1.0. Said another way, we’ll be much more conservative as regards our merge policy until we get to 1.0.&lt;/p&gt;

&lt;p&gt;We already have many plans for after 1.0 that we’ll be excited to start sharing and investing efforts on after celebrating Crystal 1.0. Let’s get there first!&lt;/p&gt;

</description>
        <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/03/03/towards-crystal-1.0.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/03/03/towards-crystal-1.0.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.33.0 released!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.33.0&quot;&gt;Crystal 0.33.0&lt;/a&gt; has been released!&lt;/p&gt;

&lt;p&gt;This release comes with bug fixes, stability of the std-lib &amp;amp; runtime, some awaited language features and lots of cleanup.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.32.1...0.33.0&quot;&gt;117 commits since 0.32.1&lt;/a&gt; by 29 contributors.&lt;/p&gt;

&lt;p&gt;Let’s review some highlights in this release. But don’t miss out on the rest of the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.33.0&quot;&gt;release changelog&lt;/a&gt; which has a lot of valuable information.&lt;/p&gt;

&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;

&lt;p&gt;The new &lt;code class=&quot;highlighter-rouge&quot;&gt;select/timeout&lt;/code&gt; language construct allows you to perform a blocking channel operation but timeout after a specific amount of time. It was previously possible to do manually, but it required some boilerplate and a dedicated fiber. This is now possible while taking advantage of libevent directly.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;got &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;timeout&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timeout&lt;/code&gt; is not a top-level method and is expected to be used only in a blocking &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; condition (ie: without an &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;). Read more about &lt;code class=&quot;highlighter-rouge&quot;&gt;timeout&lt;/code&gt; in select statements in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8506&quot;&gt;#8506&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;macros&quot;&gt;Macros&lt;/h3&gt;

&lt;p&gt;In the built-in macros the &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeNode#name&lt;/code&gt; got extended with a new overload that allows you to pick whether you want (or not) the generic arguments when getting the type’s name (default is to include them). Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8483&quot;&gt;#8483&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Bar::Baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Bar::Baz&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Foo(T)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;generic_args: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;compiler&quot;&gt;Compiler&lt;/h2&gt;

&lt;p&gt;There were some memory corruption bugs because we used &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;memcpy&lt;/code&gt; 32-bits primitives in 64-bits machines. They are now fixed in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8746&quot;&gt;#8746&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, the default &lt;code class=&quot;highlighter-rouge&quot;&gt;CRYSTAL_PATH&lt;/code&gt; gives precedence to &lt;code class=&quot;highlighter-rouge&quot;&gt;./lib&lt;/code&gt; over embedded std-lib so your shards can override some std-lib modules if needed. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8752&quot;&gt;#8752&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We did some clean-ups and completely dropped the support for previously deprecated comma separators in enums. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8657&quot;&gt;#8657&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;standard-library&quot;&gt;Standard library&lt;/h2&gt;

&lt;p&gt;We took the time to do some clean-ups regarding various previously deprecated methods and modules. Some of them deprecated almost over a year ago. &lt;code class=&quot;highlighter-rouge&quot;&gt;PartialComparable&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Crypto::Bcrypt::Password#==&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP::Server::Response#respond_with_error&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::PullParser::Kind#==&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol#==(JSON::PullParser::Kind)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::Token#type&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;String#at&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Time.new&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Time.now&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Time.utc_now&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;URI.escape&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;URI.unescape&lt;/code&gt; are really no longer available. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8646&quot;&gt;#8646&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8596&quot;&gt;#8596&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are also some additions. &lt;code class=&quot;highlighter-rouge&quot;&gt;Object#in?(collection)&lt;/code&gt; is analogous to &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#includes?(obj)&lt;/code&gt; but with the receiver and argument swapped.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4242&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8720&quot;&gt;#8720&lt;/a&gt; and check many of the usages in the current std-lib at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8723&quot;&gt;#8723&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;serialization&quot;&gt;Serialization&lt;/h3&gt;

&lt;p&gt;The JSON deserialization improved to work better with some union types in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8689&quot;&gt;#8689&lt;/a&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::PullParser&lt;/code&gt; deals properly with overflows in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8698&quot;&gt;#8698&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;dig?&lt;/code&gt; methods for &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::Any&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML::Any&lt;/code&gt; got fixed to avoid raising on non-structure values. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8745&quot;&gt;#8745&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;files&quot;&gt;Files&lt;/h3&gt;

&lt;p&gt;How File, User and Group interact with each other keeps evolving to find a sweet spot. &lt;code class=&quot;highlighter-rouge&quot;&gt;File::Info#owner&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;File::Info#group&lt;/code&gt; are deprecated in favor of &lt;code class=&quot;highlighter-rouge&quot;&gt;#owner_id&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;#group_id&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8007&quot;&gt;#8007&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;/h3&gt;

&lt;p&gt;The handling of &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; got more robust to deal with some race conditions in multi-thread and avoid using invalid file descriptors in libevent after fork. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8707&quot;&gt;#8707&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8733&quot;&gt;#8733&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OpenSSL::SSL::Socket&lt;/code&gt; was improved to deal with some misbehaving parties out in the wild.  Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8540&quot;&gt;#8540&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h3&gt;

&lt;p&gt;Sometimes in generic types, using &lt;code class=&quot;highlighter-rouge&quot;&gt;Nil&lt;/code&gt; might cause some glitches. Like in &lt;code class=&quot;highlighter-rouge&quot;&gt;Array(Nil)&lt;/code&gt;, how would you distinguish if &lt;code class=&quot;highlighter-rouge&quot;&gt;#[]?&lt;/code&gt; returns the stored &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; or the out-of-bounds value. Even though sometimes it is still useful to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Nil&lt;/code&gt; as a type argument like in &lt;code class=&quot;highlighter-rouge&quot;&gt;Channel(Nil)&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Future(Nil)&lt;/code&gt; should now be working without surprises. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8650&quot;&gt;#8650&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’ve been paying attention to sporadic failures on the CI multi-thread jobs. Sometimes the specs need to be iterated since they were written with a different single-thread mindset. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8592&quot;&gt;#8592&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8643&quot;&gt;#8643&lt;/a&gt;, and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8724&quot;&gt;#8724&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;runtime&quot;&gt;Runtime&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IO::FileDescriptor.from_stdio&lt;/code&gt; now returns an &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt; with blocking mode depending on the type of the file descriptor used for STDIN, STDOUT and STDERR. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8787&quot;&gt;#8787&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some changes in the runtime should improve the error reporting and exception handling.
Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8728&quot;&gt;#8728&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8499&quot;&gt;#8499&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8743&quot;&gt;#8743&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another addition that will reduce some paper cuts is a new top-level exception handler reporting. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8735&quot;&gt;#8735&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8791&quot;&gt;#8791&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes &lt;code class=&quot;highlighter-rouge&quot;&gt;puts&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dprintf&lt;/code&gt; are used to print to STDOUT or STDERR. But the latter is not portable. &lt;code class=&quot;highlighter-rouge&quot;&gt;Crystal::System.print_error&lt;/code&gt; was extended to handle &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;-like format. So it should be used instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;dprintf&lt;/code&gt; usually. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8786&quot;&gt;#8786&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;spec&quot;&gt;Spec&lt;/h3&gt;

&lt;p&gt;Usually using specs the &lt;code class=&quot;highlighter-rouge&quot;&gt;Spec::DotFormatter&lt;/code&gt; shows… dots! The &lt;code class=&quot;highlighter-rouge&quot;&gt;Spec::JUnitFormatter&lt;/code&gt; is another option that is a good fit for richer reporting. It’s got improved with lots of information in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8599&quot;&gt;#8599&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a bonus point this reporting was integrated in our CircleCI jobs so we can get some concise reports of failures, slow test and other statistics in the test summary.  Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8617&quot;&gt;#8617&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;doc-generator&quot;&gt;Doc generator&lt;/h3&gt;

&lt;p&gt;We finally settled to use &lt;code class=&quot;highlighter-rouge&quot;&gt;:ditto:&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:nodoc:&lt;/code&gt; for the doc generator. So you should always put the &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; around those words when documenting your code. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/6362&quot;&gt;#6362&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;platforms&quot;&gt;Platforms&lt;/h2&gt;

&lt;p&gt;Regarding Windows support there was some movement. A Windows CI using GitHub Actions was added in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8676&quot;&gt;#8676&lt;/a&gt; to help us move forward and not backwards. The &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; module in prelude was enabled in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8661&quot;&gt;#8661&lt;/a&gt;. More specs got fixed to work in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8670&quot;&gt;#8670&lt;/a&gt;. And a helper script to identify working std-lib specs was added in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8664&quot;&gt;#8664&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Regarding Alpine we are now also running it in the CI in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/7420&quot;&gt;#7420&lt;/a&gt; and you might &lt;a href=&quot;/2020/02/02/alpine-based-docker-images.html&quot;&gt;have read&lt;/a&gt; about the Alpine Docker images we are now building since &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8708&quot;&gt;#8708&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We started to use &lt;code class=&quot;highlighter-rouge&quot;&gt;lld&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt; in Linux builds since it seems we were hitting some &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt; limitations. In case you experience them you might also want to move to &lt;code class=&quot;highlighter-rouge&quot;&gt;lld&lt;/code&gt;. If it is available the &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; will take care to use it. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8641&quot;&gt;#8641&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Please update your Crystal and report any issues. We will keep moving forward and start the development focusing on 0.34.&lt;/p&gt;

&lt;p&gt;It will also be helpful if your shards are tested against Crystal nightly releases. Either Docker or Snap are the current channels to get them easily. This will help reduce the friction of a release while checking if the ecosystem is in good shape.&lt;/p&gt;

&lt;p&gt;The upcoming 0.34 is likely to include an updated shards, so using nightly would help us to collect feedback from it.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. It is extremely important for us to sustain the support through donations, so that we can maintain this development pace. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; and &lt;a href=&quot;https://salt.bountysource.com/teams/crystal-lang&quot;&gt;Bountysource&lt;/a&gt; are two available channels for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/02/14/crystal-0.33.0-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/02/14/crystal-0.33.0-released.html</guid>
      </item>
    
      <item>
        <title>Alpine-based Docker images</title>
        <description>&lt;p&gt;The Crystal team provides Docker images with installed Crystal compiler on Docker Hub at &lt;a href=&quot;https://hub.docker.com/r/crystallang/crystal/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;crystallang/crystal&lt;/code&gt;&lt;/a&gt;. Crystal versions since 0.13.0 are available as Docker images based on different versions of &lt;a href=&quot;https://ubuntu.org/&quot;&gt;Ubuntu Linux&lt;/a&gt;.
Images based on &lt;a href=&quot;https://alpinelinux.org/&quot;&gt;Alpine Linux&lt;/a&gt; are now also vailable, starting with &lt;a href=&quot;https://hub.docker.com/layers/crystallang/crystal/0.32.1-alpine/images/sha256-8f66a0a36a7e7c396944f64c89fa81a3b488ca6c82ce55ca5d5f1edd348d14e6&quot;&gt;0.32.1-alpine&lt;/a&gt;.
Alpine images are a bit more lightweight than Ubuntu images, for 0.32.1 it’s 185 MB vs. 115 MB. A few bytes saved.&lt;/p&gt;

&lt;p&gt;But more importantly, Alpine Linux is based on &lt;a href=&quot;https://www.musl-libc.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;musl-libc&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;https://www.gnu.org/software/libc/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gnu-libc&lt;/code&gt;&lt;/a&gt; which is used by default on most other distributions, including Ubuntu. Linking against &lt;code class=&quot;highlighter-rouge&quot;&gt;musl-libc&lt;/code&gt; is currently the only way to &lt;a href=&quot;https://github.com/crystal-lang/crystal/wiki/Static-Linking&quot;&gt;build fully statically linked Crystal binaries&lt;/a&gt;.
Alpine Linux makes this easy enough. For example, the offical Crystal compiler builds for Linux are statically linked against &lt;code class=&quot;highlighter-rouge&quot;&gt;musl-libc&lt;/code&gt; on Alpine Linux.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pkgs.alpinelinux.org/package/edge/community/x86_64/crystal&quot;&gt;Crystal packages for APK (Alpine’s package manager)&lt;/a&gt; have been available for quite some time and the edge releases are usually updated pretty quickly. Updated Docker images are going to be available immediately on a new Crystal release. And they’re always based on a stable version of Alpine Linux but provide the latest Crystal release.&lt;/p&gt;

&lt;p&gt;Here’s an example how the Docker image can be used to build a statically linked &lt;em&gt;Hello World&lt;/em&gt; program:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'puts &quot;Hello World!&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; hello-world.cr
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;:/workspace &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /workspace crystallang/crystal:0.32.1-alpine &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    crystal build hello-world.cr &lt;span class=&quot;nt&quot;&gt;--static&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./hello-world
&lt;span class=&quot;go&quot;&gt;Hello World!
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ldd hello-world
&lt;span class=&quot;go&quot;&gt;        statically linked&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/02/02/alpine-based-docker-images.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/02/02/alpine-based-docker-images.html</guid>
      </item>
    
      <item>
        <title>Introducing shardbox.org</title>
        <description>&lt;p&gt;I’m happy to announce the launch of &lt;a href=&quot;https://shardbox.org&quot;&gt;shardbox.org&lt;/a&gt;, a database for discovering shards.&lt;/p&gt;

&lt;p&gt;To be clear: Shardbox is not a shards registry. It won’t serve as part of shards’ dependency resolution, which works entirely decentralized. It just collects information about publicly available shards and serves as a catalog for the shards ecosystem. It’s a tool for developers to help find existing shards they might want to use.
If you’re familiar with Ruby, think of it more like &lt;a href=&quot;https://www.ruby-toolbox.com/&quot;&gt;The Ruby Toolbox&lt;/a&gt; than &lt;a href=&quot;https://rubygems.org/&quot;&gt;Rubygems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are already services providing a similar functionality such as &lt;a href=&quot;https://crystalshards.org/&quot;&gt;crystalshards.org&lt;/a&gt; or &lt;a href=&quot;https://shards.info/&quot;&gt;shards.info&lt;/a&gt;. So why do we need another one?
The existing services work as a relatively simple wrapper around the GitHub API and don’t maintain their own database. While being relatively easy to implement, this approach can’t fully support the capabilities of shards and provide in-depth information about shards and the relations inside the ecosystem.&lt;/p&gt;

&lt;p&gt;Most importantly, being focused on GitHub excludes any shards hosted elsewhere. Shardbox doesn’t rely on any hosting provider and can work with any shard repository as long as it’s publicly available. It can still use supplementary information provided by hosting providers, when available.&lt;/p&gt;

&lt;p&gt;Shardbox collects information about shards and their relationships. This makes it easy to discover reverse dependencies and dependency graphs (shards.info has a basic implementation, but it’s restricted to the capabilities of GitHub’s search API), even for older releases.&lt;/p&gt;

&lt;p&gt;When a repository is removed from GitHub, it doesn’t just vanish from the Shardbox database. Information is kept even for shards that are no longer accessible. This can help recover otherwise lost information and it’s possible to continue on when the repository becomes available at a different location. Any shard can have associated mirror repositories.&lt;/p&gt;

&lt;p&gt;Shardbox offers a lot of additional features, such as taxonomy, data analysis, release histories, access to shard contents and domain-specific search features.&lt;/p&gt;

&lt;p&gt;For the better part of 2019 I’ve been on-and-off working on this side project.
It is finally in a state that I think it works pretty well and provides useful information for everyone using and looking for shards.
I expect it to run without major disruptions, but it’s not yet battle tested. Teething troubles may apply.&lt;/p&gt;

&lt;p&gt;If you find any problems, don’t hesitate to open a ticket at &lt;a href=&quot;https://github.com/shardbox/shardbox-web/issues&quot;&gt;the issue tracker&lt;/a&gt;. Contributions for fixing bugs and feature enhancements are also very welcome. I already have a few ideas what would be nice to do next and I’m curious about your suggestions as well.
If you find a shard is missing from the database, you can add it to the catalog at &lt;a href=&quot;https://github.com/shardbox/catalog&quot;&gt;github.com/shardbox/catalog&lt;/a&gt;. See &lt;a href=&quot;https://shardbox.org/contribute&quot;&gt;shardbox.org/contribute&lt;/a&gt; for more details.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2020/01/02/introducing-shardbox.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2020/01/02/introducing-shardbox.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.32.1 released!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.32.1&quot;&gt;Crystal 0.32.1&lt;/a&gt; has been released!&lt;/p&gt;

&lt;p&gt;This release comes after a week of stabilizing the 0.32.0 with feedback mainly from the community. There were fixes and improvements that should unlock migrating to 0.32 in some contexts.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.32.0...0.32.1&quot;&gt;6 commits since 0.32.0&lt;/a&gt; by 6 contributors.&lt;/p&gt;

&lt;p&gt;Let’s review some highlights in this release. And don’t miss the rest of the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.32.1&quot;&gt;release changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main updates for 0.32 can be found in the &lt;a href=&quot;/2019/12/11/crystal-0.32.0-released.html&quot;&gt;release post of 0.32.0&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;compiler&quot;&gt;Compiler&lt;/h2&gt;

&lt;p&gt;With recent changes regarding how string interpolation is handled there were some issues with long heredocs strings. Due to some internal safety guards restrictions in the compiler a generic type can’t have more than 300 type arguments (probably reminiscent of that sparta movie). This 300 limit means that there can’t be more than 300 pieces in a string interpolation. Each piece is a continuous string literal or an interpolation. In this release a line break in a heredoc string will not generate a different piece. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8581&quot;&gt;#8581&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;standard-library&quot;&gt;Standard library&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP::WebSocket&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;on_close&lt;/code&gt; callback is now called upon any error kind and not only for &lt;code class=&quot;highlighter-rouge&quot;&gt;IO::EOFError&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8552&quot;&gt;#8552&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Please update your Crystal and report any issues. We will keep moving forward and start the development focusing on 0.33.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It will also be helpful if your shards are run against Crystal nightly releases.&lt;/strong&gt; Either Docker or Snap are the current channels to get them easily. This will help reduce the friction of a release while checking if the ecosystem is in good shape.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. It is extremely important for us to sustain the support through donations, so that we can maintain this development pace. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; and &lt;a href=&quot;https://salt.bountysource.com/teams/crystal-lang&quot;&gt;Bountysource&lt;/a&gt; are two available channels for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2019/12/18/crystal-0.32.1-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2019/12/18/crystal-0.32.1-released.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.32.0 released!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.32.0&quot;&gt;Crystal 0.32.0&lt;/a&gt; has been released!&lt;/p&gt;

&lt;p&gt;This release comes with consistencies, happiness, improvements in std-lib and tools, and important changes in concurrency.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.31.1...0.32.0&quot;&gt;197 commits since 0.31.1&lt;/a&gt; by 44 contributors.&lt;/p&gt;

&lt;p&gt;Let’s review some highlights in this release. But don’t miss out on the rest of the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.32.0&quot;&gt;release changelog&lt;/a&gt; which has a lot of valuable information.&lt;/p&gt;

&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;

&lt;p&gt;The language took one more tiny step in the direction of consistency. The boolean negation method &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; can now be called as a regular method call as &lt;code class=&quot;highlighter-rouge&quot;&gt;expr.!&lt;/code&gt;. This kind of changes are great to avoid quirks in metaprogramming. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8445&quot;&gt;#8445&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;macros&quot;&gt;Macros&lt;/h3&gt;

&lt;p&gt;Other consistencies in the macro realm are the possibility to list class variables using &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeNode#class_vars&lt;/code&gt;, and been able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;map_with_index&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayLiteral&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TupleLiteral&lt;/code&gt;. Macro lovers can find more about these changes at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8405&quot;&gt;#8405&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8049&quot;&gt;#8049&lt;/a&gt;, and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8379&quot;&gt;#8379&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A powerful feature is that you are now able to list all types a module is directly included in by using &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeNode#includers&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8133&quot;&gt;#8133&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;compiler&quot;&gt;Compiler&lt;/h2&gt;

&lt;h3 id=&quot;language-semantics&quot;&gt;Language semantics&lt;/h3&gt;

&lt;p&gt;There was a method lookup bug fixed at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8258&quot;&gt;#8258&lt;/a&gt;. You need to worry only if you have multiple overloads of the same method with a very specific combination of aliases and union types (one of them uses an alias to a union involving a type that also has an overload).&lt;/p&gt;

&lt;p&gt;Given&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Int8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Since Crystal 0.32.0 &lt;code class=&quot;highlighter-rouge&quot;&gt;foo(1)&lt;/code&gt; returns &lt;code class=&quot;highlighter-rouge&quot;&gt;42&lt;/code&gt;, instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;doc-generator&quot;&gt;Doc generator&lt;/h3&gt;

&lt;p&gt;The doc generator can produce a &lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt; which lists all HTML pages accessible for search engines. The goal is to use this sitemap to assign lower priorities to outdated doc pages. This mechanism is even better than setting a canonical url for indexed documentation. The compiler will make use of this in the near future and it might be useful for hosted documentations out there. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8348&quot;&gt;#8348&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal-website/issues/79&quot;&gt;crystal-website#79&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As the language evolves, some conventions and features can be better advertised. For yielding methods, a non-capture block argument &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; will be shown in the documentation signature.
Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8394&quot;&gt;#8394&lt;/a&gt;, and if you want to recall what the non-capture block argument is, check again &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8117&quot;&gt;#8117&lt;/a&gt; from 0.31.0.&lt;/p&gt;

&lt;h2 id=&quot;distributions&quot;&gt;Distributions&lt;/h2&gt;

&lt;p&gt;As a heads up, the base docker image since 0.32.0 is updated to bionic and llvm-8.0. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8442&quot;&gt;#8442&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;standard-library&quot;&gt;Standard library&lt;/h2&gt;

&lt;p&gt;Attention to details contributes to happiness. There will no longer be &lt;code class=&quot;highlighter-rouge&quot;&gt;Nil assertion failed&lt;/code&gt; without context for &lt;code class=&quot;highlighter-rouge&quot;&gt;getter!&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;property!&lt;/code&gt;. The type and method information will be included for clarity.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;getter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# raises NilAssertionError: Foo#bar can't be nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8200&quot;&gt;#8200&lt;/a&gt; and  &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8296&quot;&gt;#8296&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;spec&quot;&gt;Spec&lt;/h3&gt;

&lt;p&gt;Be prepared for spec happiness. You can now specify code to run before, after and around the &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; blocks of a spec or the hole suite. You can also scope these hooks to run on a specific &lt;code class=&quot;highlighter-rouge&quot;&gt;context&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;describe&lt;/code&gt; block. Note that variables declared inside hooks are not accessible in the &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; block itself, so they are aimed to play with shared context or setup resources.&lt;/p&gt;

&lt;p&gt;The methods you will be looking for are &lt;code class=&quot;highlighter-rouge&quot;&gt;before_each&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;after_each&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;before_all&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;after_all&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;around_each&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;around_all&lt;/code&gt; and can be used as follows:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;spec&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_all&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# setup a database&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;before_each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# truncate all tables&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;can create entity&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# test something assuming empty db&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;initialized system&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;before_each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# initialize some data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;after_each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# clean up some resources&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;existing entity can work&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# test something assuming initialized data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Read more about spec hooks at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8302&quot;&gt;#8302&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The happiness does not stop there. You are able to tag &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; block in specs with single or multiple strings that will allow you to select which ones to run using &lt;code class=&quot;highlighter-rouge&quot;&gt;crystal spec&lt;/code&gt; CLI.&lt;/p&gt;

&lt;p&gt;In a &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; block add a named argument &lt;code class=&quot;highlighter-rouge&quot;&gt;tags&lt;/code&gt; which may contain either a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; or an &lt;code class=&quot;highlighter-rouge&quot;&gt;Array(String)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(1) an untagged test&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(2) a fast test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;tags: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fast&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(3) a slow test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;tags: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;slow&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(4) a test with a star&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;tags: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;starred&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(5) a slow test with a star&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;tags: &lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%w(slow starred)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# same as tags: [&quot;slow&quot;, &quot;starred&quot;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Filter the specs by inclusion or exclusion.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crystal spec &lt;span class=&quot;nt&quot;&gt;--tag&lt;/span&gt; fast &lt;span class=&quot;c&quot;&gt;# runs (2)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crystal spec &lt;span class=&quot;nt&quot;&gt;--tag&lt;/span&gt; ~slow &lt;span class=&quot;c&quot;&gt;# runs (1) (2) (4)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Or even combine them&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crystal spec &lt;span class=&quot;nt&quot;&gt;--tag&lt;/span&gt; starred &lt;span class=&quot;nt&quot;&gt;--tag&lt;/span&gt; fast &lt;span class=&quot;c&quot;&gt;# runs (2) (4) (5)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crystal spec &lt;span class=&quot;nt&quot;&gt;--tag&lt;/span&gt; starred &lt;span class=&quot;nt&quot;&gt;--tag&lt;/span&gt; ~slow &lt;span class=&quot;c&quot;&gt;# runs (4)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Please do not use tags prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8068&quot;&gt;#8068&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And, last but not least, when using &lt;code class=&quot;highlighter-rouge&quot;&gt;should&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;should_not&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;be_a(T)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;be_nil&lt;/code&gt; you are now able to use the result of the expression as a narrowed type and call methods that would otherwise complain due to the original union.&lt;/p&gt;

&lt;p&gt;So, for nillable types you can do the following to avoid &lt;code class=&quot;highlighter-rouge&quot;&gt;not_nil!&lt;/code&gt; along the way:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;42&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i32?&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# x : Int32 | Nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should_not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_nil&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# update x to a narrowed type&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;# Int32&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;And with any arbitrary unions, something like the following to avoid casts:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Int32 | Char&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# update x to a narrowed type&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Int32&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_f&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&quot;concurrency-and-parallelism&quot;&gt;Concurrency and Parallelism&lt;/h3&gt;

&lt;p&gt;There has been important work regarding concurrency and parallelism. &lt;code class=&quot;highlighter-rouge&quot;&gt;Channel&lt;/code&gt; and how &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; is implemented got internal refactors and fixes. These changes fix the behavior on closed or closing channels which are more likely to happen with multi-thread. And there have been performance improvements along the way.&lt;/p&gt;

&lt;p&gt;Read more about &lt;code class=&quot;highlighter-rouge&quot;&gt;Channel&lt;/code&gt; internals refactor and optimizations at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8322&quot;&gt;#8322&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8497&quot;&gt;#8497&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Read more about the fixes related closed &lt;code class=&quot;highlighter-rouge&quot;&gt;Channel&lt;/code&gt;  at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8284&quot;&gt;#8284&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8249&quot;&gt;#8249&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8304&quot;&gt;#8304&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mutex&lt;/code&gt; also got some improvements, both feature- and performance-wise. Read more about them in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8295&quot;&gt;#8295&lt;/a&gt; and &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8563&quot;&gt;#8563&lt;/a&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutex&lt;/code&gt; as you may know prevents multiple fibers running their critical sections concurrently. This is independent of whether the fibers run in the same or in different threads. There are three behaviors or protection levels the mutex supports. When creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutex&lt;/code&gt; you might specify which protection level to use: &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutex.new(:checked)&lt;/code&gt; (default), &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutex.new(:reentrant)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutex.new(:unchecked)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;:checked&lt;/code&gt; mutex provides deadlock protection. Attempting to re-lock the mutex from the same fiber will raise an exception.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;:reentrant&lt;/code&gt; protection maintains a lock count allowing it to be used in recursive scenarios. Attempting to unlock an unlocked mutex, or a mutex locked by another fiber will raise an exception.&lt;/p&gt;

&lt;p&gt;You can disable all protections with &lt;code class=&quot;highlighter-rouge&quot;&gt;:unchecked&lt;/code&gt;. This is particularly useful for some scenarios where the lock and unlock of a critical section need to occur in different fibers.&lt;/p&gt;

&lt;h3 id=&quot;text&quot;&gt;Text&lt;/h3&gt;

&lt;p&gt;String interpolations are widely used in the language. The std-lib is updated with a &lt;code class=&quot;highlighter-rouge&quot;&gt;String.interpolation&lt;/code&gt; method that will be used directly by the compiler. Up to 0.31.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello #{world}!&quot;&lt;/code&gt; was a syntax-sugar of&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello &quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;!&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;But is now changed to&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interpolation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;This subtle change allows performant specialized interpolation logic allowing to forget about &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;foo#{bar}&quot;&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;foo&quot; + bar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is a small breaking change though &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;#{str}&quot;&lt;/code&gt; returns the same string instance stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;. But since &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; is immutable you should not worry about that change. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8400&quot;&gt;#8400&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For input parsing we have these cool new methods: &lt;code class=&quot;highlighter-rouge&quot;&gt;String#presence&lt;/code&gt; (and &lt;code class=&quot;highlighter-rouge&quot;&gt;Nil#presence&lt;/code&gt;). Here is an example of what they will let us do:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;presence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;a&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;presence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;default&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8345&quot;&gt;#8345&lt;/a&gt;, &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8508&quot;&gt;#8508&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will stop supporting &lt;code class=&quot;highlighter-rouge&quot;&gt;String#codepoint_at&lt;/code&gt; in favor of &lt;code class=&quot;highlighter-rouge&quot;&gt;String#char_at(index).ord&lt;/code&gt;. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8475&quot;&gt;#8475&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;/h3&gt;

&lt;p&gt;We won’t be using &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#grep&lt;/code&gt; anymore.  Now we are just using &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#select&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, instead of:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Baz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;grep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^B/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;Bar&quot;, &quot;Baz&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;We are going to use:&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Baz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^B/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;Bar&quot;, &quot;Baz&quot;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# or&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Baz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;starts_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;Bar&quot;, &quot;Baz&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8452&quot;&gt;#8452&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this version we may tell a &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; (or a &lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt;) to compare &lt;code class=&quot;highlighter-rouge&quot;&gt;keys&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;object_id&lt;/code&gt;. After calling &lt;code class=&quot;highlighter-rouge&quot;&gt;compare_by_identity&lt;/code&gt; how the receiver hash behaves will change. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8451&quot;&gt;#8451&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;code_section&quot;&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-crystal&quot; data-lang=&quot;crystal&quot;&gt;&lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fo&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compare_by_identity&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compare_by_identity?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fo&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; nil # not the same String instance&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Iterating over an array with chunks of 2 elements? Well, we have a treat for you. Now we may use &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#each_cons_pair&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator#cons_pair&lt;/code&gt; with rocket-enhanced performance! Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8332&quot;&gt;#8332&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;serialization&quot;&gt;Serialization&lt;/h3&gt;

&lt;p&gt;While using &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.mapping&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML.mapping&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::Serializable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML::Serializable&lt;/code&gt; sometimes the data is not quite in the right format or doesn’t quite match the type we expect. The &lt;code class=&quot;highlighter-rouge&quot;&gt;converter&lt;/code&gt; option allows you to inject some logic while converting from/to the different format. There are some new awesome helper modules: &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::ArrayConverter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML::ArrayConverter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON::HashValueConverter&lt;/code&gt; that will allow to define the converters on the items or values to be used. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8156&quot;&gt;#8156&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If the above does not make you happy enough, wait until you discover &lt;code class=&quot;highlighter-rouge&quot;&gt;use_json_discriminator&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;use_yaml_discriminator&lt;/code&gt;, that will allow you to specify which concrete type to use, based on a property value. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8406&quot;&gt;#8406&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Breaking news! &lt;code class=&quot;highlighter-rouge&quot;&gt;XML::Reader#expand&lt;/code&gt; will raise an error, and if we want the old behavior then we have &lt;code class=&quot;highlighter-rouge&quot;&gt;XML::Reader#expand?&lt;/code&gt; Making things more consistent! Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8186&quot;&gt;#8186&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;files&quot;&gt;Files&lt;/h3&gt;

&lt;p&gt;Breaking news! &lt;code class=&quot;highlighter-rouge&quot;&gt;File.expand_path&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Path#expand&lt;/code&gt; will no longer expand home (&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;) by default. It is now an opt-in argument: &lt;code class=&quot;highlighter-rouge&quot;&gt;home: true&lt;/code&gt; or even `home: “/use/this/as/home”. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/7903&quot;&gt;#7903&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;db&quot;&gt;DB&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;crystal-lang/crystal-db&lt;/code&gt; got a new release: 0.8.0. The shiny new feature is the &lt;code class=&quot;highlighter-rouge&quot;&gt;DB::Serializable&lt;/code&gt; module and &lt;code class=&quot;highlighter-rouge&quot;&gt;DB::Field&lt;/code&gt; annotation matching the JSON and YAML counterparts. Read more at  &lt;a href=&quot;https://github.com/crystal-lang/crystal-db/pull/115&quot;&gt;crystal-db#115&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to use that feature be sure to upgrade to a driver that require 0.8.0 at least.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Please update your Crystal and report any issues. We will keep moving forward and start the development focusing on 0.33.&lt;/p&gt;

&lt;p&gt;It will also be helpful if your shards are run against Crystal nightly releases. Either Docker or Snap are the current channels to get them easily. This will help reduce the friction of a release while checking if the ecosystem is in good shape.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. It is extremely important for us to sustain the support through donations, so that we can maintain this development pace. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; and &lt;a href=&quot;https://salt.bountysource.com/teams/crystal-lang&quot;&gt;Bountysource&lt;/a&gt; are two available channels for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;

</description>
        <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2019/12/11/crystal-0.32.0-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2019/12/11/crystal-0.32.0-released.html</guid>
      </item>
    
      <item>
        <title>Crystal 0.31.1 released!</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.31.1&quot;&gt;Crystal 0.31.1&lt;/a&gt; has been released!&lt;/p&gt;

&lt;p&gt;This release comes after a week of stabilizing the 0.31.0 with feedback from the community mainly. There were fixes, workaround, and improvements that should unlock migrating to 0.31 in some contexts.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://github.com/crystal-lang/crystal/compare/0.31.0...0.31.1&quot;&gt;9 commits since 0.31.0&lt;/a&gt; by 4 contributors.&lt;/p&gt;

&lt;p&gt;Let’s review some highlights in this release. But don’t miss the rest of the &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.31.0&quot;&gt;release changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main updates for 0.31 can be found in the &lt;a href=&quot;/2019/09/23/crystal-0.31.0-released.html&quot;&gt;release post of 0.31.0&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;compiler&quot;&gt;Compiler&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;var = uninitialized T&lt;/code&gt; expression is now typed in a way that allows subtypes of &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; to be stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;. This bug was preventing the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;Channel&lt;/code&gt; with subtypes as reported in &lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/8216&quot;&gt;#8261&lt;/a&gt; and fixed in &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8221&quot;&gt;#8221&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;standard-library&quot;&gt;Standard library&lt;/h2&gt;

&lt;h3 id=&quot;multithreading&quot;&gt;Multithreading&lt;/h3&gt;

&lt;p&gt;The patch that gives bdw-gc support to green threads was updated. We were using our initial proposal from &lt;a href=&quot;https://github.com/ivmai/bdwgc/pull/277&quot;&gt;ivmai/bdwgc#277&lt;/a&gt; but we updated it to its final state &lt;a href=&quot;https://github.com/ivmai/bdwgc/commit/5668de71107022a316ee967162bc16c10754b9ce&quot;&gt;ivmai/bdwgc:5668de&lt;/a&gt;. This was needed to allow some distros to use the upcoming features of bdw-gc. And is also a preparation step for the next release of the GC. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8225&quot;&gt;#8225&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;spec&quot;&gt;Spec&lt;/h2&gt;

&lt;p&gt;Define blocks to be run before and after the whole suite with &lt;code class=&quot;highlighter-rouge&quot;&gt;Spec.before_suite&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Spec.after_suite&lt;/code&gt;. You can declare as many as you want. Read more at &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/8238&quot;&gt;#8238&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Please update your Crystal and report any issues. We will keep moving forward and start the development focusing on 0.32.&lt;/p&gt;

&lt;p&gt;It will also be helpful if your shards are run against Crystal nightly releases. Either Docker or Snap are the current channels to get them easily. This will help reduce the friction of a release while checking if the ecosystem is in good shape.&lt;/p&gt;

&lt;p&gt;We have been able to do all of this thanks to the continued support of &lt;a href=&quot;https://www.84codes.com/&quot;&gt;84codes&lt;/a&gt;, and every other &lt;a href=&quot;/sponsors&quot;&gt;sponsor&lt;/a&gt;. It is extremely important for us to sustain the support through donations, so that we can maintain this development pace. &lt;a href=&quot;https://opencollective.com/crystal-lang&quot;&gt;OpenCollective&lt;/a&gt; and &lt;a href=&quot;https://salt.bountysource.com/teams/crystal-lang&quot;&gt;Bountysource&lt;/a&gt; are two available channels for that. Reach out to &lt;a href=&quot;mailto:crystal@manas.tech&quot;&gt;crystal@manas.tech&lt;/a&gt; if you’d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Sep 2019 00:00:00 +0000</pubDate>
        <link>https://ja.crystal-lang.org/2019/09/30/crystal-0.31.1-released.html</link>
        <guid isPermaLink="true">https://ja.crystal-lang.org/2019/09/30/crystal-0.31.1-released.html</guid>
      </item>
    
  </channel>
</rss>
